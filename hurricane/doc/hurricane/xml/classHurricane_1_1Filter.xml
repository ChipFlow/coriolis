<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classHurricane_1_1Filter" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Hurricane::Filter</compoundname>
    <derivedcompoundref refid="classHurricane_1_1GenericFilter" prot="public" virt="non-virtual">Hurricane::GenericFilter&lt; Type &gt;</derivedcompoundref>
    <derivedcompoundref refid="classHurricane_1_1NotFilter" prot="public" virt="non-virtual">Hurricane::NotFilter&lt; Type &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>class Type</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classHurricane_1_1Filter_1a724656fbf69d4310da15d80a7ea6c0f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Hurricane::Filter&lt; Type &gt;::Filter</definition>
        <argsstring>()</argsstring>
        <name>Filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" line="42" column="13" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Filter_1a11fdea0355a3cb2cb6b4f4c570c5b2f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Hurricane::Filter&lt; Type &gt;::~Filter</definition>
        <argsstring>()</argsstring>
        <name>~Filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" line="49" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Filter_1a90c1a8c4caf6c6018ff50f5b9754e061" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classHurricane_1_1GenericFilter" kindref="compound">GenericFilter</ref>&lt; Type &gt;</type>
        <definition>GenericFilter&lt; Type &gt; Hurricane::Filter&lt; Type &gt;::operator!</definition>
        <argsstring>() const</argsstring>
        <name>operator!</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><bold>Returns:</bold> the inverse filter of the filter <computeroutput>&lt;this&gt;</computeroutput> (accepted elements are those rejected and conversely). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" line="56" column="27" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Filter_1a596cad421801115efbc5c541f8d29e0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classHurricane_1_1Filter" kindref="compound">Filter</ref>&lt; Type &gt; *</type>
        <definition>Filter&lt; Type &gt; * Hurricane::Filter&lt; Type &gt;::getClone</definition>
        <argsstring>() const =0</argsstring>
        <name>getClone</name>
        <reimplementedby refid="classHurricane_1_1GenericFilter_1a0585fb985243523364271646a10d5972">getClone</reimplementedby>
        <reimplementedby refid="classHurricane_1_1NotFilter_1a6163d354b4ced011321bd458d7b2ddb1">getClone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<sect1 id="classHurricane_1_1Filter_1secFilterRemarks">
<title>Remarks</title>
<para>It is wise to use filters only when it is trully necessary, that is to produce useful collections to be used extensively.</para>
<para>Indeed, for the previous example, preferably write it like this : <programlisting><codeline><highlight class="normal">forEach(Net*,<sp/>inet,<sp/>cell-&gt;getNets())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>if<sp/>(inet-&gt;isExternal()<sp/>&amp;&amp;<sp/>(inet-&gt;getName()[0]<sp/>==<sp/>&apos;k&apos;))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;net:<sp/>&quot;<sp/>&lt;&lt;<sp/>*net<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> or more simply : <programlisting><codeline><highlight class="normal">forEach(Net*,<sp/>net,<sp/>cell-&gt;getExternalNets())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>if<sp/>(inet-&gt;getName()[0]<sp/>==<sp/>&apos;k&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;net:<sp/>&quot;<sp/>&lt;&lt;<sp/>*inet<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Filters are objects like any other : they can be passed as function arguments as shown below : <programlisting><codeline><highlight class="normal">Nets<sp/>Cell::getNets(const<sp/>GenericFilter&lt;Net*&gt;&amp;<sp/>filter)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//<sp/>********************************************************</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>return<sp/>getNets().getSubSet(filter);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> As far as the type <bold>NetFilter</bold> is defined as being a <bold><ref refid="classHurricane_1_1GenericFilter" kindref="compound">GenericFilter</ref>&lt;Net*&gt;</bold> the previous function can be written like this : <programlisting><codeline><highlight class="normal">Nets<sp/>Cell::getNets(const<sp/>NetFilter&amp;<sp/>filter)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//<sp/>**********************************************</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>return<sp/>getNets().getSubSet(filter);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><bold>Returns:</bold> a filter copy. </para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" line="65" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Filter_1aeaa771f17950fe05273c471ccfffb7f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>bool Hurricane::Filter&lt; Type &gt;::accept</definition>
        <argsstring>(Type type) const =0</argsstring>
        <name>accept</name>
        <reimplementedby refid="classHurricane_1_1GenericFilter_1ae23e41e1620c151e1dec2804412f38fe">accept</reimplementedby>
        <reimplementedby refid="classHurricane_1_1NotFilter_1abf67be5cd8232522bd825cc468ef4a4d">accept</reimplementedby>
        <param>
          <type>Type</type>
          <declname>type</declname>
          <defname>element</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This member function returns <bold>true</bold> if the filter accepts the element else <bold>false</bold>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" line="70" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Filter_1ad239207daa6fbb7283830819c48b92ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>string</type>
        <definition>virtual string Hurricane::Filter&lt; Type &gt;::_getTypeName</definition>
        <argsstring>() const</argsstring>
        <name>_getTypeName</name>
        <reimplementedby refid="classHurricane_1_1GenericFilter_1ab90d7f02556943defbd0c752161d1bd7">_getTypeName</reimplementedby>
        <reimplementedby refid="classHurricane_1_1NotFilter_1ad3eaf6d7d5185a9dd4c8e8af236d167d">_getTypeName</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" line="75" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Filter_1a1b7b0dcff35dafcc1cee0f8165e3360a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>string</type>
        <definition>virtual string Hurricane::Filter&lt; Type &gt;::_getString</definition>
        <argsstring>() const =0</argsstring>
        <name>_getString</name>
        <reimplementedby refid="classHurricane_1_1GenericFilter_1a1faf4aa786a8513b0d04c0d68286a074">_getString</reimplementedby>
        <reimplementedby refid="classHurricane_1_1NotFilter_1a8535791b793b0d0c4c7d3231fd0420a7">_getString</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" line="76" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classHurricane_1_1Filter_1ac3558b6ab17562a406c16d5744613ebf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hurricane::Filter&lt; Type &gt;::Filter</definition>
        <argsstring>(const Filter &amp;filter)</argsstring>
        <name>Filter</name>
        <param>
          <type>const <ref refid="classHurricane_1_1Filter" kindref="compound">Filter</ref> &amp;</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" line="44" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Filter_1a3b3aa29cdcf4ce4aeb9d42377a7fd966" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classHurricane_1_1Filter" kindref="compound">Filter</ref> &amp;</type>
        <definition>Filter&amp; Hurricane::Filter&lt; Type &gt;::operator=</definition>
        <argsstring>(const Filter &amp;filter)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classHurricane_1_1Filter" kindref="compound">Filter</ref> &amp;</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" line="54" column="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classHurricane_1_1Filter" kindref="compound">Filter</ref> description (<bold>API</bold>) </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="classHurricane_1_1Filter_1secFilterIntro">
<title>Introduction</title>
<para>A filter is a functional object which, used in conjunction with a collection, allows to get only the elements of this collection which meet some criteria.</para>
<para>This class is an abstract class which must be derived in order to get the appropriate behaviour.</para>
<para>You will have also to define the default constructor, the copy constructor, the assignment operator and overload the two following member functions :</para>
</sect1>
<sect1 id="classHurricane_1_1Filter_1secFilterSimpleExample">
<title>Simple Example</title>
<para>Definition of the filter selecting external nets of a cell : <programlisting><codeline><highlight class="normal">class<sp/>IsExternal<sp/>:<sp/>public<sp/>Filter&lt;Net*&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/>***********************************</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsExternal()<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsExternal(const<sp/>IsExternal&amp;<sp/>isExternal)<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsExternal&amp;<sp/>operator=(const<sp/>IsExternal&amp;<sp/>isExternal)<sp/>{return<sp/>*this;};</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Filter&lt;Net*&gt;*<sp/>getClone()<sp/>const<sp/>{return<sp/>new<sp/>IsExternal(*this);};</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>accept(Net*<sp/>net)<sp/>const<sp/>{return<sp/>net-&gt;isExternal();};</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> Implementation of the accessor <bold>getExternalNets</bold> for the cells : <programlisting><codeline><highlight class="normal">Nets<sp/>Cell::getExternalNet()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//<sp/>******************************</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>return<sp/>getNets().getSubSet(IsExternal());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Similarly, the accessor <bold>getInternalNets</bold> can be implemented using the <bold>!</bold> operator : <programlisting><codeline><highlight class="normal">Nets<sp/>Cell::getInternalNets()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">//<sp/>*******************************</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>return<sp/>getNets().getSubSet(!IsExternal());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="classHurricane_1_1Filter_1secFilterComplexExample">
<title>Complex Example</title>
<para>In order to implement previous examples we could have used filter with a simpler interface. Now the filters as they are defined open the door to much more complex processing.</para>
<para>As a matter of fact the function <bold>accept</bold> receives only one argument which represents the element of the collection to be accepted or rejected.</para>
<para>Sometimes the filter must take into account other criteria. For example to print the external nets of a cell whose name start with a given character. Those additional criteria will then become attributes of the filter as shown in the following example :</para>
<para><ref refid="classHurricane_1_1Filter" kindref="compound">Filter</ref> definition : <programlisting><codeline><highlight class="normal">class<sp/>MyFilter<sp/>:<sp/>public<sp/>Filter&lt;Net*&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/>*********************************</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>_c;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MyFilter(char<sp/>c)<sp/>:<sp/>_c(c)<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MyFilter(const<sp/>MyFilter&amp;<sp/>myFilter)<sp/>:<sp/>_c(myFilter._c)<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MyFilter&amp;<sp/>operator=(const<sp/>MyFilter&amp;<sp/>myFilter)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_c<sp/>=<sp/>myFilter._c;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>Filter&lt;Net*&gt;*<sp/>getClone()<sp/>const<sp/>{return<sp/>new<sp/>MyFilter(*this);};</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>virtual<sp/>bool<sp/>accept(Net*<sp/>net)<sp/>const</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>net-&gt;isExternal()<sp/>&amp;&amp;<sp/>(net-&gt;getName()[0]<sp/>==<sp/>_c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> Afterwards do <programlisting><codeline><highlight class="normal">forEach(Net*,<sp/>inet,<sp/>cell-&gt;getNets().getSubSet(MyFilter(&apos;k&apos;)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>assert(inet-&gt;isExternal());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>assert(inet-&gt;getName()[0]<sp/>==<sp/>&apos;k&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;net:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*inet)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Although this example is not of great interest, it illustrates the way to proceed to create a complex filter. </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Hurricane::GenericFilter&lt; Type &gt;</label>
        <link refid="classHurricane_1_1GenericFilter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Hurricane::NotFilter&lt; Type &gt;</label>
        <link refid="classHurricane_1_1NotFilter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Hurricane::Filter&lt; Type &gt;</label>
        <link refid="classHurricane_1_1Filter"/>
      </node>
    </inheritancegraph>
    <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" line="36" column="11" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Filter.h" bodystart="36" bodyend="78"/>
    <listofallmembers>
      <member refid="classHurricane_1_1Filter_1a1b7b0dcff35dafcc1cee0f8165e3360a" prot="public" virt="pure-virtual"><scope>Hurricane::Filter</scope><name>_getString</name></member>
      <member refid="classHurricane_1_1Filter_1ad239207daa6fbb7283830819c48b92ed" prot="public" virt="virtual"><scope>Hurricane::Filter</scope><name>_getTypeName</name></member>
      <member refid="classHurricane_1_1Filter_1aeaa771f17950fe05273c471ccfffb7f7" prot="public" virt="pure-virtual"><scope>Hurricane::Filter</scope><name>accept</name></member>
      <member refid="classHurricane_1_1Filter_1a724656fbf69d4310da15d80a7ea6c0f5" prot="public" virt="non-virtual"><scope>Hurricane::Filter</scope><name>Filter</name></member>
      <member refid="classHurricane_1_1Filter_1ac3558b6ab17562a406c16d5744613ebf" prot="private" virt="non-virtual"><scope>Hurricane::Filter</scope><name>Filter</name></member>
      <member refid="classHurricane_1_1Filter_1a596cad421801115efbc5c541f8d29e0b" prot="public" virt="pure-virtual"><scope>Hurricane::Filter</scope><name>getClone</name></member>
      <member refid="classHurricane_1_1Filter_1a90c1a8c4caf6c6018ff50f5b9754e061" prot="public" virt="non-virtual"><scope>Hurricane::Filter</scope><name>operator!</name></member>
      <member refid="classHurricane_1_1Filter_1a3b3aa29cdcf4ce4aeb9d42377a7fd966" prot="private" virt="non-virtual"><scope>Hurricane::Filter</scope><name>operator=</name></member>
      <member refid="classHurricane_1_1Filter_1a11fdea0355a3cb2cb6b4f4c570c5b2f5" prot="public" virt="virtual"><scope>Hurricane::Filter</scope><name>~Filter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
