<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Commons_8h" kind="file" language="C++">
    <compoundname>Commons.h</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cmath</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">list</includes>
    <includes local="no">set</includes>
    <includes local="no">map</includes>
    <includes local="no">stack</includes>
    <includes local="no">array</includes>
    <includes local="no">vector</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">fstream</includes>
    <includes local="no">sstream</includes>
    <includes local="yes">hurricane/Record.h</includes>
    <includes refid="Tabulation_8h" local="yes">hurricane/Tabulation.h</includes>
    <includes local="yes">hurricane/Slot.h</includes>
    <includes refid="Initializer_8h" local="yes">hurricane/Initializer.h</includes>
    <includes local="yes">hurricane/JsonWriter.h</includes>
    <includes refid="JsonObject_8h" local="yes">hurricane/JsonObject.h</includes>
    <includedby refid="DebugSession_8h" local="yes">DebugSession.h</includedby>
    <includedby refid="JsonReader_8h" local="yes">JsonReader.h</includedby>
    <includedby refid="Exception_8h" local="yes">Exception.h</includedby>
    <includedby refid="ListCollection_8h" local="yes">ListCollection.h</includedby>
    <includedby refid="MapCollection_8h" local="yes">MapCollection.h</includedby>
    <includedby refid="SetCollection_8h" local="yes">SetCollection.h</includedby>
    <includedby refid="VectorCollection_8h" local="yes">VectorCollection.h</includedby>
    <includedby refid="Locator_8h" local="yes">Locator.h</includedby>
    <includedby refid="Filter_8h" local="yes">Filter.h</includedby>
    <includedby refid="DbU_8h" local="yes">DbU.h</includedby>
    <includedby refid="Name_8h" local="yes">Name.h</includedby>
    <includedby refid="Query_8h" local="yes">Query.h</includedby>
    <incdepgraph>
      <node id="7">
        <label>list</label>
      </node>
      <node id="18">
        <label>hurricane/Tabulation.h</label>
        <link refid="Tabulation_8h_source"/>
      </node>
      <node id="21">
        <label>functional</label>
      </node>
      <node id="14">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>hurricane/Record.h</label>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>cassert</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="9">
        <label>map</label>
      </node>
      <node id="15">
        <label>fstream</label>
      </node>
      <node id="27">
        <label>boost/any.hpp</label>
      </node>
      <node id="24">
        <label>typeinfo</label>
      </node>
      <node id="22">
        <label>hurricane/JsonWriter.h</label>
      </node>
      <node id="2">
        <label>cstdio</label>
      </node>
      <node id="19">
        <label>hurricane/Slot.h</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="10">
        <label>stack</label>
      </node>
      <node id="23">
        <label>hurricane/JsonObject.h</label>
        <link refid="JsonObject_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>array</label>
      </node>
      <node id="16">
        <label>sstream</label>
      </node>
      <node id="1">
        <label>Commons.h</label>
        <link refid="Commons_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="20">
        <label>hurricane/Initializer.h</label>
        <link refid="Initializer_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>type_traits</label>
      </node>
      <node id="8">
        <label>set</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="25">
        <label>typeindex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="40">
        <label>Warning.h</label>
        <link refid="Warning_8h_source"/>
      </node>
      <node id="6">
        <label>DBo.h</label>
        <link refid="DBo_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Segment.h</label>
        <link refid="Segment_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>Pathes.h</label>
        <link refid="Pathes_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>Vertical.h</label>
        <link refid="Vertical_8h_source"/>
      </node>
      <node id="45">
        <label>Boxes.h</label>
        <link refid="Boxes_8h_source"/>
      </node>
      <node id="68">
        <label>Segments.h</label>
        <link refid="Segments_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>Relation.h</label>
        <link refid="Relation_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>Pins.h</label>
        <link refid="Pins_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>Quark.h</label>
        <link refid="Quark_8h_source"/>
      </node>
      <node id="77">
        <label>MapCollection.h</label>
        <link refid="MapCollection_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>Slices.h</label>
        <link refid="Slices_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>PhysicalRule.h</label>
        <link refid="PhysicalRule_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Diagonal.h</label>
        <link refid="Diagonal_8h_source"/>
      </node>
      <node id="58">
        <label>Gos.h</label>
        <link refid="Gos_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>Name.h</label>
        <link refid="Name_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>SetCollection.h</label>
        <link refid="SetCollection_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Technology.h</label>
        <link refid="Technology_8h_source"/>
      </node>
      <node id="12">
        <label>ViaLayer.h</label>
        <link refid="ViaLayer_8h_source"/>
      </node>
      <node id="81">
        <label>Filter.h</label>
        <link refid="Filter_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>Intervals.h</label>
        <link refid="Intervals_8h_source"/>
      </node>
      <node id="53">
        <label>Layers.h</label>
        <link refid="Layers_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>Quarks.h</label>
        <link refid="Quarks_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Library.h</label>
        <link refid="Library_8h_source"/>
      </node>
      <node id="5">
        <label>Error.h</label>
        <link refid="Error_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>HyperNet.h</label>
        <link refid="HyperNet_8h_source"/>
      </node>
      <node id="62">
        <label>Path.h</label>
        <link refid="Path_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>Libraries.h</label>
        <link refid="Libraries_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>DataBase.h</label>
        <link refid="DataBase_8h_source"/>
      </node>
      <node id="59">
        <label>QuadTree.h</label>
        <link refid="QuadTree_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>Properties.h</label>
        <link refid="Properties_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>Transformation.h</label>
        <link refid="Transformation_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>Contact.h</label>
        <link refid="Contact_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Pad.h</label>
        <link refid="Pad_8h_source"/>
      </node>
      <node id="86">
        <label>Interval.h</label>
        <link refid="Interval_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>Occurrences.h</label>
        <link refid="Occurrences_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>Interruption.h</label>
        <link refid="Interruption_8h_source"/>
      </node>
      <node id="26">
        <label>Pin.h</label>
        <link refid="Pin_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>Hook.h</label>
        <link refid="Hook_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>Names.h</label>
        <link refid="Names_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>Nets.h</label>
        <link refid="Nets_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Collection.h</label>
        <link refid="Collection_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>Horizontals.h</label>
        <link refid="Horizontals_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>Entities.h</label>
        <link refid="Entities_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Net.h</label>
        <link refid="Net_8h_source"/>
      </node>
      <node id="79">
        <label>VectorCollection.h</label>
        <link refid="VectorCollection_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>Property.h</label>
        <link refid="Property_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ContactLayer.h</label>
        <link refid="ContactLayer_8h_source"/>
      </node>
      <node id="18">
        <label>Query.h</label>
        <link refid="Query_8h_source"/>
      </node>
      <node id="42">
        <label>ListCollection.h</label>
        <link refid="ListCollection_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Go.h</label>
        <link refid="Go_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>UpdateSession.h</label>
        <link refid="UpdateSession_8h_source"/>
      </node>
      <node id="14">
        <label>DiffusionLayer.h</label>
        <link refid="DiffusionLayer_8h_source"/>
      </node>
      <node id="75">
        <label>Hooks.h</label>
        <link refid="Hooks_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>DBos.h</label>
        <link refid="DBos_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Polygon.h</label>
        <link refid="Polygon_8h_source"/>
      </node>
      <node id="82">
        <label>DbU.h</label>
        <link refid="DbU_8h_source"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>Entity.h</label>
        <link refid="Entity_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>Verticals.h</label>
        <link refid="Verticals_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>RoutingPad.h</label>
        <link refid="RoutingPad_8h_source"/>
      </node>
      <node id="22">
        <label>Instance.h</label>
        <link refid="Instance_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>Locator.h</label>
        <link refid="Locator_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>Point.h</label>
        <link refid="Point_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Commons.h</label>
        <link refid="Commons_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Component.h</label>
        <link refid="Component_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>Instances.h</label>
        <link refid="Instances_8h_source"/>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Layer.h</label>
        <link refid="Layer_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>Box.h</label>
        <link refid="Box_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Horizontal.h</label>
        <link refid="Horizontal_8h_source"/>
      </node>
      <node id="72">
        <label>Rubbers.h</label>
        <link refid="Rubbers_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>Slice.h</label>
        <link refid="Slice_8h_source"/>
      </node>
      <node id="64">
        <label>Components.h</label>
        <link refid="Components_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>BasicLayer.h</label>
        <link refid="BasicLayer_8h_source"/>
      </node>
      <node id="4">
        <label>Exception.h</label>
        <link refid="Exception_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>Pads.h</label>
        <link refid="Pads_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>Plugs.h</label>
        <link refid="Plugs_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>JsonReader.h</label>
        <link refid="JsonReader_8h_source"/>
      </node>
      <node id="2">
        <label>DebugSession.h</label>
        <link refid="DebugSession_8h_source"/>
      </node>
      <node id="44">
        <label>Points.h</label>
        <link refid="Points_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>Cells.h</label>
        <link refid="Cells_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>Occurrence.h</label>
        <link refid="Occurrence_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>Contacts.h</label>
        <link refid="Contacts_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>RegularLayer.h</label>
        <link refid="RegularLayer_8h_source"/>
      </node>
      <node id="24">
        <label>Plug.h</label>
        <link refid="Plug_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>Rubber.h</label>
        <link refid="Rubber_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>TransistorLayer.h</label>
        <link refid="TransistorLayer_8h_source"/>
      </node>
      <node id="16">
        <label>Cell.h</label>
        <link refid="Cell_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classHurricane_1_1DboDestroy" prot="public">Hurricane::DboDestroy</innerclass>
    <innerclass refid="classHurricane_1_1dbo__ptr" prot="public">Hurricane::dbo_ptr</innerclass>
    <innerclass refid="clasststream" prot="public">tstream</innerclass>
    <innerclass refid="struct__Tsetw" prot="public">_Tsetw</innerclass>
    <innerclass refid="struct__Tsetf" prot="public">_Tsetf</innerclass>
    <innernamespace refid="namespaceHurricane">Hurricane</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="Commons_8h_1a6eb26b8245b71c1415a0f623dcbef0d5" prot="public" static="no">
        <name>HURRICANE_COMMONS_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="33" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1a60de7e9c182813ec0c2ed29a658fefda" prot="public" static="no">
        <name>GETSTRING_POINTER_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="903" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="903" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1a224dc71fdd27d84300dbc07bdb803407" prot="public" static="no">
        <name>IOSTREAM_POINTER_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="914" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1aac728272da9c2812627ba9ef370ecd2d" prot="public" static="no">
        <name>GETRECORD_POINTER_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="927" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1aae83fc2f0b1e63ba598f85792f9739f6" prot="public" static="no">
        <name>GETSTRING_REFERENCE_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="935" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="935" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1adb96d823cfb6ecd47bfcc2494724f59a" prot="public" static="no">
        <name>IOSTREAM_REFERENCE_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="943" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1a17ebcb668947ccb886410c08aa1695c7" prot="public" static="no">
        <name>GETRECORD_REFERENCE_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="951" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1a9d101a74d7ef390d5e37cfb7af9a0c17" prot="public" static="no">
        <name>GETSTRING_VALUE_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="959" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1a39b143c86c0563dbb0a616851335b599" prot="public" static="no">
        <name>IOSTREAM_VALUE_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="964" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1a58980f9730616003b9a551a611d788fb" prot="public" static="no">
        <name>GETRECORD_VALUE_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="969" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="969" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1ac7f7f19b5dcf44f83ade4adcbd0c9a7a" prot="public" static="no">
        <name>INSPECTOR_P_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="974" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1ad33de69f2f426c7fb38504a7b6a22062" prot="public" static="no">
        <name>INSPECTOR_R_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="980" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1a369d6a1566bcf4e68da9659c135b9219" prot="public" static="no">
        <name>INSPECTOR_PR_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="986" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1a7509260b5c96d34197bf3dfbe84d6435" prot="public" static="no">
        <name>INSPECTOR_PV_SUPPORT</name>
        <param><defname>Data</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="996" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="996" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1af5b27e711bdb9cc111868eb504737f0d" prot="public" static="no">
        <name>cdebug_log</name>
        <param><defname>level</defname></param>
        <param><defname>indent</defname></param>
        <initializer>if (cdebug.enabled(level)) cdebug.log(level,indent)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1119" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="1119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Commons_8h_1a419104e423aa39107da2ffdc4ddd36eb" prot="public" static="no">
        <name>cdebug_tabw</name>
        <param><defname>level</defname></param>
        <param><defname>indent</defname></param>
        <initializer>cdebug.tabw(level,indent)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1120" column="10" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="1120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Commons_8h_1aa30ba0bfa893c73ca492035f9f01ac14" prot="public" static="no" mutable="no">
        <type><ref refid="clasststream" kindref="compound">tstream</ref></type>
        <definition>tstream cdebug</definition>
        <argsstring></argsstring>
        <name>cdebug</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1116" column="17" declfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" declline="1116" declcolumn="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Commons_8h_1a44aa773d40e617ee6a41853ce24a10f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Slot *</type>
        <definition>Hurricane::Slot* getSlot</definition>
        <argsstring>(std::string name, Data)</argsstring>
        <name>getSlot</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Data</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="164" column="35" declfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" declline="164" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ac89ff520694dd878f6619deab892d057" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(Data data)</argsstring>
        <name>getString</name>
        <param>
          <type>Data</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="172" column="32" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aced015659ccd841165bb8f34783bc01e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const bool &amp; &gt;</definition>
        <argsstring>(const bool &amp;b)</argsstring>
        <name>getString&lt; const bool &amp; &gt;</name>
        <param>
          <type>const bool &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="179" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="179" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a358a3f1e1de91f37e52bb23a6cad7263" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const int &amp; &gt;</definition>
        <argsstring>(const int &amp;i)</argsstring>
        <name>getString&lt; const int &amp; &gt;</name>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="182" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="182" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a61b846ac1761bea21d88a3f793a19391" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const long &amp; &gt;</definition>
        <argsstring>(const long &amp;l)</argsstring>
        <name>getString&lt; const long &amp; &gt;</name>
        <param>
          <type>const long &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="185" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="185" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a34c4a142c507603c3827c41cfc7f76cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const unsigned int &amp; &gt;</definition>
        <argsstring>(const unsigned int &amp;u)</argsstring>
        <name>getString&lt; const unsigned int &amp; &gt;</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="188" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="188" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ad11886d1981dc8358c14a1534fe94c53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const unsigned long &amp; &gt;</definition>
        <argsstring>(const unsigned long &amp;ul)</argsstring>
        <name>getString&lt; const unsigned long &amp; &gt;</name>
        <param>
          <type>const unsigned long &amp;</type>
          <declname>ul</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="191" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="191" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a781b2b99fb9805282a63c45791dad398" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const unsigned long long &amp; &gt;</definition>
        <argsstring>(const unsigned long long &amp;ull)</argsstring>
        <name>getString&lt; const unsigned long long &amp; &gt;</name>
        <param>
          <type>const unsigned long long &amp;</type>
          <declname>ull</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="194" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="194" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ac16783d7c89fbd57cb1233a46b440b7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const unsigned short int &amp; &gt;</definition>
        <argsstring>(const unsigned short int &amp;us)</argsstring>
        <name>getString&lt; const unsigned short int &amp; &gt;</name>
        <param>
          <type>const unsigned short int &amp;</type>
          <declname>us</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="197" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="197" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ae74a1498447ce5164a5d767f21daf11a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const float &amp; &gt;</definition>
        <argsstring>(const float &amp;f)</argsstring>
        <name>getString&lt; const float &amp; &gt;</name>
        <param>
          <type>const float &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="200" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="200" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aa5991ca9f7eda1fec146b095fe878ca7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const double &amp; &gt;</definition>
        <argsstring>(const double &amp;d)</argsstring>
        <name>getString&lt; const double &amp; &gt;</name>
        <param>
          <type>const double &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="203" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="203" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a9145b4efb30858f2558a83c73d2bfff5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const std::string &amp; &gt;</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>getString&lt; const std::string &amp; &gt;</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="206" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="206" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1afef1fdcc37ec1a81b4d0dbae7cd0ea4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const bool * &gt;</definition>
        <argsstring>(const bool *b)</argsstring>
        <name>getString&lt; const bool * &gt;</name>
        <param>
          <type>const bool *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="211" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="211" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aa4ab486ae61d8d60db8cbd9df4a7dfe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const char * &gt;</definition>
        <argsstring>(const char *c)</argsstring>
        <name>getString&lt; const char * &gt;</name>
        <param>
          <type>const char *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="214" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="214" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a8a6a58e7827a1505bbf0721693414a0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const int * &gt;</definition>
        <argsstring>(const int *i)</argsstring>
        <name>getString&lt; const int * &gt;</name>
        <param>
          <type>const int *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="217" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="217" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a8f931f32ba887d4dce4af9033273e65f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const long * &gt;</definition>
        <argsstring>(const long *l)</argsstring>
        <name>getString&lt; const long * &gt;</name>
        <param>
          <type>const long *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="220" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="220" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a350b895b2335c52d7571aff66318124e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const unsigned int * &gt;</definition>
        <argsstring>(const unsigned int *u)</argsstring>
        <name>getString&lt; const unsigned int * &gt;</name>
        <param>
          <type>const unsigned int *</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="223" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="223" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a70b9fd76b8cf33ec7588820f557ae068" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const unsigned long * &gt;</definition>
        <argsstring>(const unsigned long *ul)</argsstring>
        <name>getString&lt; const unsigned long * &gt;</name>
        <param>
          <type>const unsigned long *</type>
          <declname>ul</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="226" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="226" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a480a8c3716f2014268f07c67337f1b28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const unsigned long long * &gt;</definition>
        <argsstring>(const unsigned long long *ull)</argsstring>
        <name>getString&lt; const unsigned long long * &gt;</name>
        <param>
          <type>const unsigned long long *</type>
          <declname>ull</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="229" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="229" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a251f7762fed6da4b11186f6df7dc174e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const unsigned short int * &gt;</definition>
        <argsstring>(const unsigned short int *us)</argsstring>
        <name>getString&lt; const unsigned short int * &gt;</name>
        <param>
          <type>const unsigned short int *</type>
          <declname>us</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="232" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="232" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ab945f89f117ebd7361f97ab754df4e06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const float * &gt;</definition>
        <argsstring>(const float *f)</argsstring>
        <name>getString&lt; const float * &gt;</name>
        <param>
          <type>const float *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="235" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="235" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ab2b41826642e67469acbb5ec0d8bf070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const double * &gt;</definition>
        <argsstring>(const double *d)</argsstring>
        <name>getString&lt; const double * &gt;</name>
        <param>
          <type>const double *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="238" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="238" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a933b1a93c8cacd766f8b58886a98d5b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const void * &gt;</definition>
        <argsstring>(const void *p)</argsstring>
        <name>getString&lt; const void * &gt;</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="241" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="241" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a897cb5d2abbfe17b9c9811ddd50ead8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; const std::string * &gt;</definition>
        <argsstring>(const std::string *s)</argsstring>
        <name>getString&lt; const std::string * &gt;</name>
        <param>
          <type>const std::string *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="244" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="244" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a2577be920d6a55e68e5410fa29208c81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; bool * &gt;</definition>
        <argsstring>(bool *b)</argsstring>
        <name>getString&lt; bool * &gt;</name>
        <param>
          <type>bool *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="250" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="250" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1af0abb14e1461c0a97eacdff76ebc5738" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; char * &gt;</definition>
        <argsstring>(char *c)</argsstring>
        <name>getString&lt; char * &gt;</name>
        <param>
          <type>char *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="253" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="253" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1af6f8274ed7483131c74428b7dfdf0fa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; int * &gt;</definition>
        <argsstring>(int *i)</argsstring>
        <name>getString&lt; int * &gt;</name>
        <param>
          <type>int *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="256" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="256" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a3de461edcc7468651b2b64b0f4097650" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; long * &gt;</definition>
        <argsstring>(long *l)</argsstring>
        <name>getString&lt; long * &gt;</name>
        <param>
          <type>long *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="259" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="259" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a63cddcbbd899db3e0f493393dc7538ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; unsigned int * &gt;</definition>
        <argsstring>(unsigned int *u)</argsstring>
        <name>getString&lt; unsigned int * &gt;</name>
        <param>
          <type>unsigned int *</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="262" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="262" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a6b9bdeb135d1b8a98fd671e29517c728" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; unsigned long * &gt;</definition>
        <argsstring>(unsigned long *ul)</argsstring>
        <name>getString&lt; unsigned long * &gt;</name>
        <param>
          <type>unsigned long *</type>
          <declname>ul</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="265" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="265" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a6ccab8dcfa8188aa88343313af826853" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; unsigned long long * &gt;</definition>
        <argsstring>(unsigned long long *ull)</argsstring>
        <name>getString&lt; unsigned long long * &gt;</name>
        <param>
          <type>unsigned long long *</type>
          <declname>ull</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="268" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="268" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a68b519b218a7d58576cac4a18e5f47bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; unsigned short int * &gt;</definition>
        <argsstring>(unsigned short int *us)</argsstring>
        <name>getString&lt; unsigned short int * &gt;</name>
        <param>
          <type>unsigned short int *</type>
          <declname>us</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="271" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="271" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aedd5635612bac0b97bc1f0a1b77c1444" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; float * &gt;</definition>
        <argsstring>(float *f)</argsstring>
        <name>getString&lt; float * &gt;</name>
        <param>
          <type>float *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="274" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="274" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a0533f61b516bb46d3dd9457fb58d176a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; double * &gt;</definition>
        <argsstring>(double *d)</argsstring>
        <name>getString&lt; double * &gt;</name>
        <param>
          <type>double *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="277" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="277" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ac48f1ab30297a6ec473a09e201b4f2a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; void * &gt;</definition>
        <argsstring>(void *p)</argsstring>
        <name>getString&lt; void * &gt;</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="280" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="280" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1abde678a914a782a0da9fe12185cea0cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; std::string * &gt;</definition>
        <argsstring>(std::string *s)</argsstring>
        <name>getString&lt; std::string * &gt;</name>
        <param>
          <type>std::string *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="283" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="283" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a7a509dc6a47b76d648ba169562dd6c9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; bool &gt;</definition>
        <argsstring>(bool b)</argsstring>
        <name>getString&lt; bool &gt;</name>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="289" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="289" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1abf8706575afb23711cd762e1f2d2e23d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; char &gt;</definition>
        <argsstring>(char c)</argsstring>
        <name>getString&lt; char &gt;</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="292" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="292" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a4ee56e032215604224d2d5105e46e90f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; int &gt;</definition>
        <argsstring>(int i)</argsstring>
        <name>getString&lt; int &gt;</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="295" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="295" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a893d4047084f8f1c654f450cefea8af4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; long &gt;</definition>
        <argsstring>(long l)</argsstring>
        <name>getString&lt; long &gt;</name>
        <param>
          <type>long</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="298" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="298" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a3b1c97da18217a52f4c73612493fcc01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; unsigned int &gt;</definition>
        <argsstring>(unsigned int u)</argsstring>
        <name>getString&lt; unsigned int &gt;</name>
        <param>
          <type>unsigned int</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="301" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="301" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a2ba87a03e7830ba2f93ccbf7d1bfcb75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; unsigned long &gt;</definition>
        <argsstring>(unsigned long ul)</argsstring>
        <name>getString&lt; unsigned long &gt;</name>
        <param>
          <type>unsigned long</type>
          <declname>ul</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="304" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="304" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a996e74f6867ee520a4dd708c5ee1aa5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; unsigned long long &gt;</definition>
        <argsstring>(unsigned long long ull)</argsstring>
        <name>getString&lt; unsigned long long &gt;</name>
        <param>
          <type>unsigned long long</type>
          <declname>ull</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="307" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="307" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a2165bd3807878162b88d951afa901ee1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; unsigned short int &gt;</definition>
        <argsstring>(unsigned short int us)</argsstring>
        <name>getString&lt; unsigned short int &gt;</name>
        <param>
          <type>unsigned short int</type>
          <declname>us</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="310" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="310" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ad6b8d7f2b6c9368b1d2bfee213db4bfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; float &gt;</definition>
        <argsstring>(float f)</argsstring>
        <name>getString&lt; float &gt;</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="313" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="313" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a5a9c618a96bfb0773398f805543a123a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; double &gt;</definition>
        <argsstring>(double d)</argsstring>
        <name>getString&lt; double &gt;</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="316" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="316" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aa54d62d58fc21c690caabbf3b1ee5dd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString&lt; std::string &gt;</definition>
        <argsstring>(std::string s)</argsstring>
        <name>getString&lt; std::string &gt;</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="319" column="18" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="319" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a436552b9c5c565b1bac31c6f5bd0b92e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(Data data)</argsstring>
        <name>getRecord</name>
        <param>
          <type>Data</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="323" column="37" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="323" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a2420a916f386ff66db724a4ca9a09fbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::pair&lt; T, U &gt; &amp;p)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::pair&lt; T, U &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="334" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aa27f52e637477fc09468c2e0ef7806b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::pair&lt; T, U &gt; &amp;p)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::pair&lt; T, U &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="341" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="341" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a15c2b4491085bce642537ab6777947cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(std::pair&lt; T, U &gt; &amp;p)</argsstring>
        <name>getString</name>
        <param>
          <type>std::pair&lt; T, U &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="352" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="352" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a065e7a0b861b407e77c969dc1c52d02a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(std::pair&lt; T, U &gt; &amp;p)</argsstring>
        <name>getRecord</name>
        <param>
          <type>std::pair&lt; T, U &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="359" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="359" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a1eff9c5321ef08c49568c3117ebbc43c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(std::array&lt; Element, N &gt; *v)</argsstring>
        <name>getString</name>
        <param>
          <type>std::array&lt; Element, N &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="374" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="374" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a1c0d0ad9814791430b18060ac1688782" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(std::array&lt; Element, N &gt; *v)</argsstring>
        <name>getRecord</name>
        <param>
          <type>std::array&lt; Element, N &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="382" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="382" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a1582805fd10dc2eb0025c244cfe478b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::array&lt; Element, N &gt; *v)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::array&lt; Element, N &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="399" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="399" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ae6ca449274f0522fdf878734aa555aa0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::array&lt; Element, N &gt; *v)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::array&lt; Element, N &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="407" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="407" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a9d129721bb33099d6ee931af9ebe8517" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(std::array&lt; Element, N &gt; &amp;v)</argsstring>
        <name>getString</name>
        <param>
          <type>std::array&lt; Element, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="424" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="424" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a0ed90b2fb58e2a6bb2cff4bafe742361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(std::array&lt; Element, N &gt; &amp;v)</argsstring>
        <name>getRecord</name>
        <param>
          <type>std::array&lt; Element, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="432" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="432" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aa58fe6209af2c0a2a9c4edf3eecce122" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::array&lt; Element, N &gt; &amp;v)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::array&lt; Element, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="446" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="446" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a275b42f9ea542c5a211e8338888d5873" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::array&lt; Element, N &gt; &amp;v)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::array&lt; Element, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="454" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="454" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a721905ddbad7200b0cddf36c5b585638" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(std::vector&lt; Element &gt; *v)</argsstring>
        <name>getString</name>
        <param>
          <type>std::vector&lt; Element &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="472" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="472" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a721a0866dafb15431c147682d8ca4404" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(std::vector&lt; Element &gt; *v)</argsstring>
        <name>getRecord</name>
        <param>
          <type>std::vector&lt; Element &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="480" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="480" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a303c1f3145eaf8b4cf87c46690f7f9f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(std::vector&lt; Element * &gt; *v)</argsstring>
        <name>getString</name>
        <param>
          <type>std::vector&lt; Element * &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="501" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="501" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a35659b0bc77c93bae3bef36e03399d23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(std::vector&lt; Element * &gt; *v)</argsstring>
        <name>getRecord</name>
        <param>
          <type>std::vector&lt; Element * &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="509" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="509" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a5a9fbe75b79a27d7802caf1820e391e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::vector&lt; Element &gt; *v)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::vector&lt; Element &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="530" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="530" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aa84847531044650f1158fef620c34a33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::vector&lt; Element &gt; *v)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::vector&lt; Element &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="538" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="538" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a4da6f81f05a4c283f3bf5fe568e636db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::vector&lt; Element * &gt; *v)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::vector&lt; Element * &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="559" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="559" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a9aba33326cd1db7a8bcd9b742cbc030c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::vector&lt; Element * &gt; *v)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::vector&lt; Element * &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="567" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="567" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a1b6fb8ca1f5cd6d8711f6f7988b04e42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::list&lt; Element &gt; *l)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::list&lt; Element &gt; *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="588" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="588" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1acbb81ab9d7762c51809cd42aff2d5020" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::list&lt; Element &gt; *l)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::list&lt; Element &gt; *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="596" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="596" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a71d97806b6296436baefce2243db8826" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(std::list&lt; Element &gt; *l)</argsstring>
        <name>getString</name>
        <param>
          <type>std::list&lt; Element &gt; *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="613" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="613" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a2052b0d65dce1c25e139627ec28c2dfe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(std::list&lt; Element &gt; *l)</argsstring>
        <name>getRecord</name>
        <param>
          <type>std::list&lt; Element &gt; *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="621" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="621" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1acabcf2485c4bfdba02808a8848dc798c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(std::map&lt; Key, Element &gt; *m)</argsstring>
        <name>getString</name>
        <param>
          <type>std::map&lt; Key, Element &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="642" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="642" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aab1d9e2fa80f9b1529a7db293520cf2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(std::map&lt; Key, Element &gt; *m)</argsstring>
        <name>getRecord</name>
        <param>
          <type>std::map&lt; Key, Element &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="650" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="650" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ae6f2bd92ca25b14bd61b2cbb33238133" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::map&lt; Key, Element &gt; *m)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::map&lt; Key, Element &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="666" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="666" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a2fcfdf170079c6d654d74beb32257c16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::map&lt; Key, Element &gt; *m)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::map&lt; Key, Element &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="674" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="674" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aaf72512bb2bc2fc06050593a9e3312e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(std::map&lt; Key, Element, Compare &gt; *m)</argsstring>
        <name>getString</name>
        <param>
          <type>std::map&lt; Key, Element, Compare &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="694" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="694" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ae3f31d3bfd1d0a42fa0ec3d456ba13a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(std::map&lt; Key, Element, Compare &gt; *m)</argsstring>
        <name>getRecord</name>
        <param>
          <type>std::map&lt; Key, Element, Compare &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="702" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="702" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aecc3c1fb2cab2e576f32d1a41903ba77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::map&lt; Key, Element, Compare &gt; *m)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::map&lt; Key, Element, Compare &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="718" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="718" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aab06eedabfdf20648fa3f5c3cba945d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::map&lt; Key, Element, Compare &gt; *m)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::map&lt; Key, Element, Compare &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="726" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="726" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ad024ab44c47b7b076f00ab7c8feee688" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::multimap&lt; Key, Element, Compare &gt; *m)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::multimap&lt; Key, Element, Compare &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="746" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="746" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a0e8bd49d03ff09ed609274f922c5e306" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::multimap&lt; Key, Element, Compare &gt; *m)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::multimap&lt; Key, Element, Compare &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="754" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="754" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a35dce0dd583d805664c473b9d4300527" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(std::multimap&lt; Key, Element, Compare &gt; *m)</argsstring>
        <name>getString</name>
        <param>
          <type>std::multimap&lt; Key, Element, Compare &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="770" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="770" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aaf1ad1983f8194aaf2b425b57a5ff2f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(std::multimap&lt; Key, Element, Compare &gt; *m)</argsstring>
        <name>getRecord</name>
        <param>
          <type>std::multimap&lt; Key, Element, Compare &gt; *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="778" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="778" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a4d9410c445ab34c45c211823d7cf4654" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::set&lt; Element, Compare &gt; *s)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::set&lt; Element, Compare &gt; *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="798" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="798" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a73c853742291b0b229f40e89b436ba33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::set&lt; Element, Compare &gt; *s)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::set&lt; Element, Compare &gt; *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="806" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="806" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1afd564202a0f54a565acc115ab9929e80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(std::set&lt; Element, Compare, Allocator &gt; *s)</argsstring>
        <name>getString</name>
        <param>
          <type>std::set&lt; Element, Compare, Allocator &gt; *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="823" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="823" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ae0ff2ad664497ef79de271020a5d619c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(std::set&lt; Element, Compare, Allocator &gt; *s)</argsstring>
        <name>getRecord</name>
        <param>
          <type>std::set&lt; Element, Compare, Allocator &gt; *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="831" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="831" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ad9ee39df714586ca634ef6a27b1aa7d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::set&lt; Element, Compare &gt; &amp;s)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::set&lt; Element, Compare &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="851" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="851" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ab8d2f2c9ccf13128ce4a70f1ff866736" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::set&lt; Element, Compare &gt; &amp;s)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::set&lt; Element, Compare &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="859" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="859" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a8e82e856c40db3b22859d09cb0dd6609" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string getString</definition>
        <argsstring>(const std::multiset&lt; Element, Compare &gt; *s)</argsstring>
        <name>getString</name>
        <param>
          <type>const std::multiset&lt; Element, Compare &gt; *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="879" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="879" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a46bbdfe70da6b8758abb9b22fd21dc63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>Hurricane::Record *</type>
        <definition>Hurricane::Record* getRecord</definition>
        <argsstring>(const std::multiset&lt; Element, Compare &gt; *s)</argsstring>
        <name>getRecord</name>
        <param>
          <type>const std::multiset&lt; Element, Compare &gt; *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="887" column="26" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="887" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aa5bfd79fffbab2ec525a0333d5bee440" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
        <definition>tstream&amp; operator&lt;&lt;</definition>
        <argsstring>(tstream &amp;o, const std::string s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1078" column="8" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="1078" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aee2c5024a83718001cebc89600a41269" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
        <definition>tstream&amp; operator&lt;&lt;</definition>
        <argsstring>(tstream &amp;o, T *t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1087" column="8" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="1087" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a61661c386e3e4175c582c62a7d3c87a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
        <definition>tstream&amp; operator&lt;&lt;</definition>
        <argsstring>(tstream &amp;o, T t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1095" column="8" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="1095" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1aaac0f6c2830791012d67a499a0f33962" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
        <definition>tstream&amp; operator&lt;&lt;</definition>
        <argsstring>(tstream &amp;o, const T *t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1099" column="8" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="1099" bodyend="1100"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1ad5d70a50e4fce9bd056b376c02956ed3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
        <definition>tstream&amp; operator&lt;&lt;</definition>
        <argsstring>(tstream &amp;o, std::ios_base &amp;(*pf)(std::ios_base &amp;))</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>std::ios_base &amp;(*)(std::ios_base &amp;)</type>
          <declname>pf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1103" column="8" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="1103" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a94cea55c5ef023043f0d24d12d398eb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>_Tsetw</type>
        <definition>_Tsetw tsetw</definition>
        <argsstring>(int n)</argsstring>
        <name>tsetw</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1107" column="15" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="1107" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a6d28b87b6bf0585704f533fe0dbfecc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>_Tsetf</type>
        <definition>_Tsetf tsetf</definition>
        <argsstring>(int n)</argsstring>
        <name>tsetf</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1110" column="15" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="1110" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="Commons_8h_1a9e0b2fa45d56e0f430fe3668e4ec00dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
        <definition>tstream&amp; operator&lt;&lt;</definition>
        <argsstring>(tstream &amp;o, _Tsetw manip)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="clasststream" kindref="compound">tstream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>_Tsetw</type>
          <declname>manip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" line="1113" column="8" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h" bodystart="1113" bodyend="1114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>-*-<sp/>C++<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>BULL<sp/>S.A.<sp/>2000-2018,<sp/>All<sp/>Rights<sp/>Reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Hurricane.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hurricane<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/><sp/>and/or<sp/><sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/><sp/>Lesser<sp/><sp/>General<sp/><sp/>Public<sp/><sp/>License<sp/><sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/><sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hurricane<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/><sp/>be<sp/><sp/>useful,<sp/><sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHAN-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/>See<sp/><sp/>the<sp/><sp/>Lesser<sp/><sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>Lesser<sp/><sp/>GNU<sp/><sp/>General<sp/><sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>License<sp/>along<sp/>with<sp/>Hurricane.<sp/>If<sp/>not,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>+-----------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H<sp/>U<sp/>R<sp/>R<sp/>I<sp/>C<sp/>A<sp/>N<sp/>E<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/><sp/><sp/><sp/><sp/>V<sp/>L<sp/>S<sp/>I<sp/><sp/><sp/>B<sp/>a<sp/>c<sp/>k<sp/>e<sp/>n<sp/>d<sp/><sp/><sp/>D<sp/>a<sp/>t<sp/>a<sp/>-<sp/>B<sp/>a<sp/>s<sp/>e<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/><sp/>Author<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Remy<sp/>Escassut<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/><sp/>E-mail<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jean-Paul.Chaput@lip6.fr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/>===============================================================<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/><sp/>C++<sp/>Header<sp/><sp/>:<sp/><sp/>&quot;./hurricane/Commons.h&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>+-----------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HURRICANE_COMMONS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>+-----------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Macros<sp/>Definition<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>+-----------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceHurricane" kindref="compound">Hurricane</ref><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Slot;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+-------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_ptr&lt;&gt;<sp/>support<sp/>for<sp/>DBo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+-------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DboType&gt;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DboDestroy<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()<sp/>(<sp/>DboType*<sp/>dbo<sp/>)<sp/>{<sp/>dbo-&gt;destroy();<sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DboType&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">dbo_ptr<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DboType&gt;<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dbo_ptr<sp/>(<sp/>DboType*<sp/>dbo<sp/>)<sp/>:<sp/>std::shared_ptr&lt;DboType&gt;(dbo,DboDestroy&lt;DboType&gt;())<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+-------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Miscellaneous<sp/>Utilites<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+-------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>_TName<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>_PName<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Hurricane::&quot;</highlight><highlight class="normal"><sp/>+<sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Type<sp/>abs<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>value<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value&lt;0)<sp/>?<sp/>-value<sp/>:<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="namespaceHurricane_1a93af87d1b7b19294382ba6dae51d0363" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><ref refid="namespaceHurricane_1a93af87d1b7b19294382ba6dae51d0363" kindref="member">demangle</ref><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>symbol<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><ref refid="namespaceHurricane_1a93af87d1b7b19294382ba6dae51d0363" kindref="member">demangle</ref><sp/>(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceHurricane_1a93af87d1b7b19294382ba6dae51d0363" kindref="member">demangle</ref>(symbol.c_str());<sp/>}</highlight></codeline>
<codeline lineno="98" refid="namespaceHurricane_1ae4be209e8a3f2227b0c7a22246817c6f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><ref refid="namespaceHurricane_1a93af87d1b7b19294382ba6dae51d0363" kindref="member">demangle</ref><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type_info&amp;<sp/>info<sp/><sp/><sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceHurricane_1a93af87d1b7b19294382ba6dae51d0363" kindref="member">demangle</ref>(info.name());<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>erase_element<sp/>(<sp/>vector&lt;Element*&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element*<sp/>e<sp/>)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ielement<sp/>=<sp/>v.begin()<sp/>;<sp/>ielement<sp/>!=<sp/>v.end()<sp/>;<sp/>++ielement<sp/>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*ielement<sp/>==<sp/>e)<sp/>{<sp/>v.erase(<sp/>ielement<sp/>);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>complete<sp/>explanation<sp/>of<sp/>this<sp/>function,<sp/>please<sp/>look<sp/>at<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>floatCompare<sp/>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b<sp/>)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>a<sp/>==<sp/>b<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&amp;a<sp/>-<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)&amp;b;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>floatDifference<sp/>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold<sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>difference<sp/>=<sp/>floatCompare(a,b);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>abs(difference)<sp/>&lt;<sp/>threshold<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(difference&lt;0)<sp/>?<sp/>-1<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>floatRound<sp/>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>value,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>precision<sp/>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rounded<sp/>=<sp/>roundf<sp/>(<sp/>value*precision<sp/>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>rounded<sp/>/<sp/>precision;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>roundfp<sp/>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>precision=100.0<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>roundf(value*precision)/precision;<sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>order<sp/>(<sp/>Type&amp;<sp/>a,<sp/>Type&amp;<sp/>b<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a&gt;b)<sp/>std::swap(a,b);<sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Type<sp/><sp/>setInBound<sp/>(<sp/>Type<sp/>lower,<sp/>Type<sp/>upper,<sp/>Type&amp;<sp/>value<sp/>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(value<sp/>&lt;<sp/>lower)<sp/>value<sp/>=<sp/>lower;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&gt;<sp/>upper)<sp/>value<sp/>=<sp/>upper;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>Hurricane<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/>&quot;hurricane/Record.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>+-----------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functions<sp/>for<sp/>Inspector<sp/>Support<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>+-----------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>1:<sp/>Theses<sp/>are<sp/>specialized<sp/>templates<sp/>for<sp/>&quot;getString&lt;&gt;()&quot;<sp/>&amp;<sp/>&quot;getRecord&lt;&gt;()&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>2:<sp/>we<sp/>are<sp/>outside<sp/>the<sp/>Hurricane<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>3:<sp/>thoses<sp/>templates<sp/>manage<sp/>all<sp/>POD<sp/>&amp;<sp/>STL<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Data&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Slot*<sp/>getSlot<sp/>(<sp/>std::string<sp/>name,<sp/>Data<sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;POD<sp/>types&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Data&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>Data<sp/>data<sp/>)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;&lt;type<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespaceHurricane_1a93af87d1b7b19294382ba6dae51d0363" kindref="member">Hurricane::demangle</ref>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(data).name())</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::string(</highlight><highlight class="stringliteral">&quot;<sp/>unsupported<sp/>by<sp/>getString()&gt;&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;const<sp/>&amp;&quot;<sp/>flavors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>bool&amp;&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>b<sp/>)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(b)?</highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;False&quot;</highlight><highlight class="normal"><sp/>;<sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>int&amp;&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i<sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>i;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>long&amp;&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>l;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>unsigned<sp/>int&amp;&gt;<sp/><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>u<sp/>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>u;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>unsigned<sp/>long&amp;&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>ul<sp/>)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>ul;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>unsigned<sp/>long<sp/>long&amp;&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>ull<sp/>)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>ull;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>unsigned<sp/>short<sp/>int&amp;&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>us<sp/>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>us;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>float&amp;&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>f;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>double&amp;&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>d<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{<sp/>std::ostringstream<sp/>os;<sp/>os<sp/>&lt;&lt;<sp/>d;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>std::string&amp;&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;const<sp/>*&quot;<sp/>flavors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>bool*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>b<sp/>)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*b)?</highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;False&quot;</highlight><highlight class="normal"><sp/>;<sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>char*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c<sp/>)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;<sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>int*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>i<sp/>)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*i;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>long*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*l;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>unsigned<sp/>int*&gt;<sp/><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>u<sp/>)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*u;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>unsigned<sp/>long*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>ul<sp/>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*ul;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>unsigned<sp/>long<sp/>long*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>ull<sp/>)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*ull;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>unsigned<sp/>short<sp/>int*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>us<sp/>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*us;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>float*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*f;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>double*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>d<sp/>)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{<sp/>std::ostringstream<sp/>os;<sp/>os<sp/>&lt;&lt;<sp/>*d;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>void*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>p;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;const<sp/>std::string*&gt;<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string*<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;<sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;*&quot;<sp/>flavors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;bool*&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>b<sp/>)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*b)?</highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;False&quot;</highlight><highlight class="normal"><sp/>;<sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;char*&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c<sp/>)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;<sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;int*&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>i<sp/>)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*i;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;long*&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*l;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;unsigned<sp/>int*&gt;<sp/><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>u<sp/>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*u;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;unsigned<sp/>long*&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>ul<sp/>)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*ul;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;unsigned<sp/>long<sp/>long*&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>ull<sp/>)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*ull;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;unsigned<sp/>short<sp/>int*&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>us<sp/>)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*us;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;float*&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>*f;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;double*&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>d<sp/>)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{<sp/>std::ostringstream<sp/>os;<sp/>os<sp/>&lt;&lt;<sp/>*d;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;void*&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>p;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;std::string*&gt;<sp/>(<sp/>std::string*<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;<sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;by<sp/>value&quot;<sp/>flavors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;bool&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(b)?</highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&quot;False&quot;</highlight><highlight class="normal"><sp/>;<sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;char&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(1,c);<sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;int&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>i;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;long&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>l<sp/>)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>l;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;unsigned<sp/>int&gt;<sp/><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u<sp/>)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>u;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;unsigned<sp/>long&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ul<sp/>)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>ul;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;unsigned<sp/>long<sp/>long&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ull<sp/>)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>ull;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;unsigned<sp/>short<sp/>int&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>us<sp/>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>us;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;float&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{<sp/>std::ostringstream<sp/>os<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>os<sp/>&lt;&lt;<sp/>f;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;double&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{<sp/>std::ostringstream<sp/>os;<sp/>os<sp/>&lt;&lt;<sp/>d;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();<sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString&lt;std::string&gt;<sp/>(<sp/>std::string<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Data&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>Data<sp/>data<sp/>)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//std::cerr<sp/>&lt;&lt;<sp/>&quot;::getRecord(Data)<sp/>Data=&quot;<sp/>&lt;&lt;<sp/>Hurricane::demangle(typeid(data).name())<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;[const]<sp/>std::pair&lt;T,U&gt;&amp;&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;T,U&gt;&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::pair&lt;T,U&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;T,U&gt;&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::pair&lt;T,U&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>record-&gt;add(<sp/>getSlot&lt;const<sp/>T&gt;(std::string(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;p.first<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>record-&gt;add(<sp/>getSlot&lt;const<sp/>U&gt;(std::string(</highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">),<sp/>&amp;p.second)<sp/>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>std::pair&lt;T,U&gt;&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;std::pair&lt;T,U&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>std::pair&lt;T,U&gt;&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::pair&lt;T,U&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>record-&gt;add(<sp/>getSlot&lt;T&gt;(std::string(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;p.first<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>record-&gt;add(<sp/>getSlot&lt;U&gt;(std::string(</highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">),<sp/>&amp;p.second)<sp/>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;[const]<sp/>std::array&lt;Element&gt;*&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>std::array&lt;Element,N&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::array&lt;Element,N&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(v-&gt;size());</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>std::array&lt;Element,N&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!v-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::array&lt;Element,N&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::array&lt;Element,N&gt;::iterator<sp/>iterator<sp/>=<sp/>v-&gt;begin();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>v-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;Element&gt;(getString(n++),<sp/>*iterator)<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;Element,N&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::array&lt;Element,N&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(v-&gt;size());</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;Element,N&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!v-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::array&lt;Element,N&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::array&lt;Element,N&gt;::const_iterator<sp/>iterator<sp/>=<sp/>v-&gt;begin();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>v-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;const<sp/>Element&gt;(getString(n++),<sp/>*iterator)<sp/>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>std::array&lt;Element,N&gt;&amp;<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::array&lt;Element,N&gt;&amp;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(v.size());</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>std::array&lt;Element,N&gt;&amp;<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>v.empty())<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::array&lt;Element,N&gt;&amp;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element<sp/>:<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add(<sp/>getSlot&lt;Element&gt;(getString(n++),<sp/>element)<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;Element,N&gt;&amp;<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::array&lt;Element,N&gt;&amp;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(v.size());</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;Element,N&gt;&amp;<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>v.empty())<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::array&lt;Element,N&gt;&amp;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element<sp/>:<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add(<sp/>getSlot&lt;Element&gt;(getString(n++),<sp/>element)<sp/>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;std::vector&lt;Element&gt;*&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>std::vector&lt;Element&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;Element&gt;*:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(v-&gt;size());</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>std::vector&lt;Element&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!v-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;Element&gt;*&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;Element&gt;::iterator<sp/>iterator<sp/>=<sp/>v-&gt;begin();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>v-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;const<sp/>Element*&gt;(getString(n++),<sp/>&amp;(*iterator))<sp/>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;std::vector&lt;Element*&gt;*&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>std::vector&lt;Element*&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;Element*&gt;*:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(v-&gt;size());</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>std::vector&lt;Element*&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!v-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;Element*&gt;*&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;Element*&gt;::iterator<sp/>iterator<sp/>=<sp/>v-&gt;begin();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>v-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;Element*&gt;(getString(n++),<sp/>*iterator)<sp/>);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;const<sp/>std::vector&lt;Element&gt;*&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Element&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::vector&lt;Element&gt;*:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(v-&gt;size());</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Element&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!v-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::vector&lt;Element&gt;*&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;Element&gt;::const_iterator<sp/>iterator<sp/>=<sp/>v-&gt;begin();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>v-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;const<sp/>Element*&gt;(getString(n++),<sp/>&amp;(*iterator))<sp/>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;const<sp/>std::vector&lt;Element*&gt;*&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Element*&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::vector&lt;Element*&gt;*:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(v-&gt;size());</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Element*&gt;*<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>v-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::vector&lt;Element*&gt;*&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;Element*&gt;::const_iterator<sp/>iterator<sp/>=<sp/>v-&gt;begin();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iterator<sp/>!=<sp/>v-&gt;end())<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;const<sp/>Element*&gt;(getString(n++),<sp/>*iterator)<sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;const<sp/>std::list&lt;Element&gt;*&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;Element&gt;*<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::list&lt;Element&gt;*:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(l-&gt;size());</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::list&lt;Element&gt;*<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!l-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::list&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::list&lt;Element&gt;::const_iterator<sp/>iterator<sp/>=<sp/>l-&gt;begin();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>l-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;const<sp/>Element*&gt;(getString(n++),<sp/>&amp;(*iterator))<sp/>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>std::list&lt;Element&gt;*<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::list&lt;Element&gt;*:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(l-&gt;size());</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>std::list&lt;Element&gt;*<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!l-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::list&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::list&lt;Element&gt;::iterator<sp/>iterator<sp/>=<sp/>l-&gt;begin();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>l-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;const<sp/>Element*&gt;(getString(n++),<sp/>&amp;(*iterator))<sp/>);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;[const]<sp/>std::map&lt;Key,Element,Compare&gt;*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>std::map&lt;Key,Element&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::map&lt;Element&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(m-&gt;size());</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>std::map&lt;Key,Element&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::map&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;Key,Element&gt;::iterator<sp/>iterator<sp/>=<sp/>m-&gt;begin();</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>m-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;Element&gt;(getString(iterator-&gt;first),<sp/>iterator-&gt;second)<sp/>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Key,Element&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::map&lt;Element&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(m-&gt;size());</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Key,Element&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::map&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;Key,Element&gt;::const_iterator<sp/>iterator<sp/>=<sp/>m-&gt;begin();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>m-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;const<sp/>Element&gt;(getString(iterator-&gt;first),<sp/>iterator-&gt;second)<sp/>);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;[const]<sp/>std::map&lt;Key,Element,Compare&gt;*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>std::map&lt;Key,Element,Compare&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::map&lt;Element&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(m-&gt;size());</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>std::map&lt;Key,Element,Compare&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::map&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;Key,Element,Compare&gt;::iterator<sp/>iterator<sp/>=<sp/>m-&gt;begin();</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>m-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;Element&gt;(getString(iterator-&gt;first),<sp/>iterator-&gt;second)<sp/>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Key,Element,Compare&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="719"><highlight class="normal">{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::map&lt;Element&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(m-&gt;size());</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Key,Element,Compare&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="727"><highlight class="normal">{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::map&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::map&lt;Key,Element,Compare&gt;::const_iterator<sp/>iterator<sp/>=<sp/>m-&gt;begin();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>m-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;const<sp/>Element&gt;(getString(iterator-&gt;first),<sp/>iterator-&gt;second)<sp/>);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;const<sp/>std::multimap&lt;Key,Element,Compare&gt;*&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::multimap&lt;Key,Element,Compare&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::multimap&lt;Element&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(m-&gt;size());</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::multimap&lt;Key,Element,Compare&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::multimap&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::multimap&lt;Key,Element,Compare&gt;::const_iterator<sp/>iterator<sp/>=<sp/>m-&gt;begin();</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>m-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;const<sp/>Element&gt;(getString(iterator-&gt;first),<sp/>iterator-&gt;second)<sp/>);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>std::multimap&lt;Key,Element,Compare&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::multimap&lt;Element&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(m-&gt;size());</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>std::multimap&lt;Key,Element,Compare&gt;*<sp/>m<sp/>)</highlight></codeline>
<codeline lineno="779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::multimap&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::multimap&lt;Key,Element,Compare&gt;::iterator<sp/>iterator<sp/>=<sp/>m-&gt;begin();</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>m-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;Element&gt;(getString(iterator-&gt;first),<sp/>iterator-&gt;second)<sp/>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;[const]<sp/>std::set&lt;Element,Compare&gt;*&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;Element,Compare&gt;*<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::set&lt;Element&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(s-&gt;size());</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;Element,Compare&gt;*<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!s-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::set&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::set&lt;Element,Compare&gt;::const_iterator<sp/>iterator<sp/>=<sp/>s-&gt;begin();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>s-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;const<sp/>Element&gt;(getString(n++),<sp/>*iterator)<sp/>);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>&gt;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/>std::set&lt;Element,Compare,Allocator&gt;*<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::set&lt;Element&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(s-&gt;size());</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>&gt;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/>std::set&lt;Element,Compare,Allocator&gt;*<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>s-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::set&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::set&lt;Element,Compare,Allocator&gt;::iterator<sp/>iterator<sp/>=<sp/>s-&gt;begin();</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>s-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add(<sp/>getSlot&lt;Element&gt;(getString(n++),<sp/>*iterator)<sp/>);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;[const]<sp/>std::set&lt;Element,Compare&gt;&amp;&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;Element,Compare&gt;&amp;<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::set&lt;Element&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(s.size());</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;Element,Compare&gt;&amp;<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="860"><highlight class="normal">{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!s.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::set&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::set&lt;Element,Compare&gt;::const_iterator<sp/>iterator<sp/>=<sp/>s.begin();</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>s.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;Element&gt;(getString(n++),<sp/>*iterator)<sp/>);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inspector<sp/>Support<sp/>for<sp/><sp/>:<sp/><sp/>&quot;const<sp/>std::multiset&lt;Element,Compare&gt;*&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><sp/>getString<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::multiset&lt;Element,Compare&gt;*<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="880"><highlight class="normal">{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;std::multiset&lt;Element&gt;:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>+<sp/>getString&lt;size_t&gt;(s-&gt;size());</highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Hurricane::Record*<sp/>getRecord<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::multiset&lt;Element,Compare&gt;*<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>Hurricane::Record*<sp/>record<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!s-&gt;empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>record<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hurricane::Record<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;std::multiset&lt;Element&gt;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::multiset&lt;Element,Compare&gt;::const_iterator<sp/>iterator<sp/>=<sp/>s-&gt;begin();</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>iterator<sp/>!=<sp/>s-&gt;end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>record-&gt;add<sp/>(<sp/>getSlot&lt;Element&gt;(getString(n++),<sp/>*iterator)<sp/>);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++iterator;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GETSTRING_POINTER_SUPPORT(Data)<sp/>\</highlight></codeline>
<codeline lineno="904"><highlight class="preprocessor"><sp/><sp/>template&lt;&gt;<sp/>inline<sp/>std::string<sp/>getString&lt;Data*&gt;(<sp/>Data*<sp/>data<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="905"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="906"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!data)<sp/>return<sp/>&quot;NULL<sp/>[&quot;</highlight><highlight class="normal"><sp/>#Data<sp/>&quot;]&quot;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>data-&gt;_getString();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>template&lt;&gt;<sp/>inline<sp/>std::string<sp/>getString&lt;const<sp/>Data*&gt;(<sp/>const<sp/>Data*<sp/>data<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>{<sp/>if<sp/>(!data)<sp/>return<sp/>&quot;NULL<sp/>[const<sp/>&quot;<sp/>#Data<sp/>&quot;]&quot;;<sp/>return<sp/>data-&gt;_getString();<sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>IOSTREAM_POINTER_SUPPORT(Data)<sp/>\</highlight></codeline>
<codeline lineno="915"><highlight class="preprocessor"><sp/><sp/>inline<sp/>std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>o,<sp/>Data*<sp/>d<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="916"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="917"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!d)<sp/>return<sp/>o<sp/>&lt;&lt;<sp/>&quot;NULL<sp/>[&quot;</highlight><highlight class="normal"><sp/>#Data<sp/>&quot;]&quot;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>o<sp/>&lt;&lt;<sp/>&quot;&amp;&quot;<sp/>&lt;&lt;<sp/>getString&lt;const<sp/>Data*&gt;(d);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>inline<sp/>std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>o,<sp/>const<sp/>Data*<sp/>d<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!d)<sp/>return<sp/>o<sp/>&lt;&lt;<sp/>&quot;NULL<sp/>[const<sp/>&quot;<sp/>#Data<sp/>&quot;]&quot;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>o<sp/>&lt;&lt;<sp/>&quot;&amp;&quot;<sp/>&lt;&lt;<sp/>getString&lt;const<sp/>Data*&gt;(d);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GETRECORD_POINTER_SUPPORT(Data)<sp/>\</highlight></codeline>
<codeline lineno="928"><highlight class="preprocessor"><sp/><sp/>template&lt;&gt;<sp/>inline<sp/>Hurricane::Record*<sp/>getRecord&lt;Data*&gt;(<sp/>Data*<sp/>data<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="929"><highlight class="preprocessor"><sp/><sp/>{<sp/>if<sp/>(!data)<sp/>return<sp/>NULL;<sp/>return<sp/>data-&gt;_getRecord();<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="930"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="931"><highlight class="preprocessor"><sp/><sp/>template&lt;&gt;<sp/>inline<sp/>Hurricane::Record*<sp/>getRecord&lt;const<sp/>Data*&gt;(<sp/>const<sp/>Data*<sp/>data<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="932"><highlight class="preprocessor"><sp/><sp/>{<sp/>if<sp/>(!data)<sp/>return<sp/>NULL;<sp/>return<sp/>data-&gt;_getRecord();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GETSTRING_REFERENCE_SUPPORT(Data)<sp/>\</highlight></codeline>
<codeline lineno="936"><highlight class="preprocessor"><sp/><sp/>template&lt;&gt;<sp/>inline<sp/>std::string<sp/>getString&lt;Data&amp;&gt;(<sp/>Data&amp;<sp/>data<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="937"><highlight class="preprocessor"><sp/><sp/>{<sp/>return<sp/>data._getString();<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="938"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="939"><highlight class="preprocessor"><sp/><sp/>template&lt;&gt;<sp/>inline<sp/>std::string<sp/>getString&lt;const<sp/>Data&amp;&gt;(<sp/>const<sp/>Data&amp;<sp/>data<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="940"><highlight class="preprocessor"><sp/><sp/>{<sp/>return<sp/>data._getString();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>IOSTREAM_REFERENCE_SUPPORT(Data)<sp/>\</highlight></codeline>
<codeline lineno="944"><highlight class="preprocessor"><sp/><sp/>inline<sp/>std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>o,<sp/>Data&amp;<sp/>d<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="945"><highlight class="preprocessor"><sp/><sp/>{<sp/>return<sp/>o<sp/>&lt;&lt;<sp/>getString&lt;Data&amp;&gt;(d);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="946"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="947"><highlight class="preprocessor"><sp/><sp/>inline<sp/>std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>o,<sp/>const<sp/>Data&amp;<sp/>d<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="948"><highlight class="preprocessor"><sp/><sp/>{<sp/>return<sp/>o<sp/>&lt;&lt;<sp/>getString&lt;const<sp/>Data&amp;&gt;(d);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="949"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="950"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GETRECORD_REFERENCE_SUPPORT(Data)<sp/>\</highlight></codeline>
<codeline lineno="952"><highlight class="preprocessor"><sp/><sp/>template&lt;&gt;<sp/>inline<sp/>Hurricane::Record*<sp/>getRecord&lt;Data&amp;&gt;(<sp/>Data&amp;<sp/>data<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="953"><highlight class="preprocessor"><sp/><sp/>{<sp/>return<sp/>data._getRecord();<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="954"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="955"><highlight class="preprocessor"><sp/><sp/>template&lt;&gt;<sp/>inline<sp/>Hurricane::Record*<sp/>getRecord&lt;const<sp/>Data&amp;&gt;(<sp/>const<sp/>Data&amp;<sp/>data<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="956"><highlight class="preprocessor"><sp/><sp/>{<sp/>return<sp/>data._getRecord();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GETSTRING_VALUE_SUPPORT(Data)<sp/>\</highlight></codeline>
<codeline lineno="960"><highlight class="preprocessor"><sp/><sp/>template&lt;&gt;<sp/>inline<sp/>std::string<sp/>getString&lt;Data&gt;(<sp/>Data<sp/>data<sp/>)<sp/><sp/>\</highlight></codeline>
<codeline lineno="961"><highlight class="preprocessor"><sp/><sp/>{<sp/>return<sp/>data._getString();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>IOSTREAM_VALUE_SUPPORT(Data)<sp/>\</highlight></codeline>
<codeline lineno="965"><highlight class="preprocessor"><sp/><sp/>inline<sp/>std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>o,<sp/>Data<sp/>d<sp/>)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="966"><highlight class="preprocessor"><sp/><sp/>{<sp/>return<sp/>o<sp/>&lt;&lt;<sp/>getString&lt;Data&gt;(d);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GETRECORD_VALUE_SUPPORT(Data)<sp/>\</highlight></codeline>
<codeline lineno="970"><highlight class="preprocessor"><sp/><sp/>template&lt;&gt;<sp/>inline<sp/>Hurricane::Record*<sp/>getRecord&lt;Data&gt;(<sp/>Data<sp/>data<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="971"><highlight class="preprocessor"><sp/><sp/>{<sp/>return<sp/>data._getRecord();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>INSPECTOR_P_SUPPORT(Data)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="975"><highlight class="preprocessor"><sp/><sp/>GETRECORD_POINTER_SUPPORT(Data)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="976"><highlight class="preprocessor"><sp/><sp/>GETSTRING_POINTER_SUPPORT(Data)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="977"><highlight class="preprocessor"><sp/><sp/>IOSTREAM_POINTER_SUPPORT(Data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>INSPECTOR_R_SUPPORT(Data)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="981"><highlight class="preprocessor"><sp/><sp/>GETRECORD_REFERENCE_SUPPORT(Data)<sp/><sp/>\</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor"><sp/><sp/>GETSTRING_REFERENCE_SUPPORT(Data)<sp/><sp/>\</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"><sp/><sp/>IOSTREAM_REFERENCE_SUPPORT(Data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>INSPECTOR_PR_SUPPORT(Data)<sp/><sp/>\</highlight></codeline>
<codeline lineno="987"><highlight class="preprocessor"><sp/><sp/>GETSTRING_POINTER_SUPPORT(Data)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="988"><highlight class="preprocessor"><sp/><sp/>GETSTRING_REFERENCE_SUPPORT(Data)<sp/><sp/>\</highlight></codeline>
<codeline lineno="989"><highlight class="preprocessor"><sp/><sp/>GETSTRING_VALUE_SUPPORT(Data)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="990"><highlight class="preprocessor"><sp/><sp/>IOSTREAM_POINTER_SUPPORT(Data)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="991"><highlight class="preprocessor"><sp/><sp/>IOSTREAM_REFERENCE_SUPPORT(Data)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="992"><highlight class="preprocessor"><sp/><sp/>GETRECORD_POINTER_SUPPORT(Data)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="993"><highlight class="preprocessor"><sp/><sp/>GETRECORD_REFERENCE_SUPPORT(Data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>INSPECTOR_PV_SUPPORT(Data)<sp/><sp/>\</highlight></codeline>
<codeline lineno="997"><highlight class="preprocessor"><sp/><sp/>GETSTRING_POINTER_SUPPORT(Data)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="998"><highlight class="preprocessor"><sp/><sp/>GETSTRING_VALUE_SUPPORT(Data)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="999"><highlight class="preprocessor"><sp/><sp/>IOSTREAM_POINTER_SUPPORT(Data)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1000"><highlight class="preprocessor"><sp/><sp/>IOSTREAM_VALUE_SUPPORT(Data)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1001"><highlight class="preprocessor"><sp/><sp/>GETRECORD_POINTER_SUPPORT(Data)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1002"><highlight class="preprocessor"><sp/><sp/>GETRECORD_VALUE_SUPPORT(Data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hurricane/Tabulation.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Class<sp/><sp/>:<sp/><sp/>&quot;::cdebug()&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wrapper<sp/>around<sp/>the<sp/>STL<sp/>ostream<sp/>which<sp/>to<sp/>print<sp/>debugging<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013" refid="clasststream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="clasststream" kindref="compound">tstream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::ostream<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMinLevel<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMaxLevel<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setMinLevel<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setMaxLevel<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getLevel<sp/><sp/><sp/><sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setLevel<sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enabled<sp/><sp/><sp/><sp/><sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enabled<sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><sp/>log<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0<sp/>);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><sp/>tabw<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="clasststream" kindref="compound">tstream</ref><sp/><sp/><sp/><sp/><sp/>(<sp/>std::ostream<sp/>&amp;<sp/>);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><sp/>put<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><sp/>flush<sp/><sp/><sp/><sp/><sp/><sp/><sp/>();</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><sp/>_tab<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>();</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><sp/>_tabw<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Overload<sp/>for<sp/>manipulators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><sp/>operator&lt;&lt;<sp/><sp/>(<sp/>std::ostream&amp;<sp/>(*pf)(std::ostream<sp/>&amp;)<sp/>);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_minLevel;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_maxLevel;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_level;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHurricane_1_1Tabulation" kindref="compound">Hurricane::Tabulation</ref><sp/><sp/>_tabulation;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>tstream::tstream<sp/>(<sp/>std::ostream&amp;<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>:<sp/>std::ostream(s.rdbuf())</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>,<sp/>_minLevel<sp/><sp/>(100000)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>,<sp/>_maxLevel<sp/><sp/>(0)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>,<sp/>_level<sp/><sp/><sp/><sp/><sp/>(0)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>,<sp/>_tabulation(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1048"><highlight class="normal">{<sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050" refid="clasststream_1a86cfc3fc7bfa7d0064d27dea74d6888d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="clasststream_1a86cfc3fc7bfa7d0064d27dea74d6888d" kindref="member">tstream::getMinLevel</ref><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_minLevel;<sp/>}</highlight></codeline>
<codeline lineno="1051" refid="clasststream_1abb7ecc2e0ddeab5442d52acb2ea5fd64" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="clasststream_1abb7ecc2e0ddeab5442d52acb2ea5fd64" kindref="member">tstream::getMaxLevel</ref><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_maxLevel;<sp/>}</highlight></codeline>
<codeline lineno="1052" refid="clasststream_1a0dad8cbc8fc5611b788f55c75a20a88e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="clasststream_1a0dad8cbc8fc5611b788f55c75a20a88e" kindref="member">tstream::setMinLevel</ref><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pl=_minLevel;<sp/>_minLevel=l;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pl;<sp/>}</highlight></codeline>
<codeline lineno="1053" refid="clasststream_1a75cb778234d7b49d9e89c73e6efcd132" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="clasststream_1a75cb778234d7b49d9e89c73e6efcd132" kindref="member">tstream::setMaxLevel</ref><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pl=_maxLevel;<sp/>_maxLevel=l;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pl;<sp/>}</highlight></codeline>
<codeline lineno="1054" refid="clasststream_1a01c90e5cc80064cae20d3a4bc3320683" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="clasststream_1a01c90e5cc80064cae20d3a4bc3320683" kindref="member">tstream::getLevel</ref><sp/><sp/><sp/><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_level;<sp/>}</highlight></codeline>
<codeline lineno="1055" refid="clasststream_1a37fa7894d7ae83674ee7cb5a69a4c4a5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="clasststream_1a37fa7894d7ae83674ee7cb5a69a4c4a5" kindref="member">tstream::setLevel</ref><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>)<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pl=_level;<sp/>_level=l;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pl;<sp/>}</highlight></codeline>
<codeline lineno="1056" refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">tstream::enabled</ref><sp/><sp/><sp/><sp/><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_level<sp/>&gt;=<sp/>_minLevel)<sp/>and<sp/>(_level<sp/>&lt;<sp/>_maxLevel);<sp/>}</highlight></codeline>
<codeline lineno="1057" refid="clasststream_1a3dab6aeefd316ad326a29cec3c2c574b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">tstream::enabled</ref><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(l<sp/>&gt;=<sp/>_minLevel)<sp/>and<sp/>(l<sp/>&lt;<sp/>_maxLevel);<sp/>}</highlight></codeline>
<codeline lineno="1058" refid="clasststream_1a5aa7a21d7b95f1bf40e68b5b13118fd0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><ref refid="clasststream_1a5aa7a21d7b95f1bf40e68b5b13118fd0" kindref="member">tstream::tabw</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>)<sp/>{<sp/><ref refid="clasststream_1a37fa7894d7ae83674ee7cb5a69a4c4a5" kindref="member">setLevel</ref>(level);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_tabw(count);<sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>tstream::put<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ostream*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;put(c);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>tstream::flush<sp/><sp/><sp/><sp/><sp/><sp/><sp/>()<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ostream*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;flush();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>tstream::operator&lt;&lt;<sp/><sp/>(<sp/>std::ostream&amp;<sp/>(*pf)(std::ostream&amp;)<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/>(*pf)(*this);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><sp/>tstream::_tab<sp/><sp/>()<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/>(*this)<sp/>&lt;&lt;<sp/>_tabulation;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><sp/>tstream::_tabw<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(count<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(count--)<sp/>_tabulation++;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(count++)<sp/>_tabulation--;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074" refid="clasststream_1a1fe9745dc492e891a6e765e34fa082c3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/><ref refid="clasststream_1a1fe9745dc492e891a6e765e34fa082c3" kindref="member">tstream::log</ref><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>)</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">{<sp/><ref refid="clasststream_1a37fa7894d7ae83674ee7cb5a69a4c4a5" kindref="member">setLevel</ref>(level);<sp/>_tab();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_tabw(count);<sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>STL<sp/>Types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>operator&lt;&lt;<sp/>(<sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o.<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ostream&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(o)<sp/>&lt;&lt;<sp/>s;<sp/>}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;<sp/>};</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>POD<sp/>Types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inline<sp/>tstream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>tstream&amp;<sp/>o,<sp/>T&amp;<sp/>t<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{<sp/>if<sp/>(o.enabled())<sp/>{<sp/>static_cast&lt;std::ostream&amp;&gt;(o)<sp/>&lt;&lt;<sp/>getString&lt;T&amp;&gt;(t);<sp/>}<sp/>return<sp/>o;<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>operator&lt;&lt;<sp/>(<sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>o,<sp/>T*<sp/>t<sp/>)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o.<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ostream&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(o)<sp/>&lt;&lt;<sp/>getString&lt;T*&gt;(t);<sp/>}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;<sp/>};</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inline<sp/>tstream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>tstream&amp;<sp/>o,<sp/>const<sp/>T&amp;<sp/>t<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{<sp/>if<sp/>(o.enabled())<sp/>{<sp/>static_cast&lt;std::ostream&amp;&gt;(o)<sp/>&lt;&lt;<sp/>getString&lt;const<sp/>T&amp;&gt;(t);<sp/>}<sp/>return<sp/>o;<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>operator&lt;&lt;<sp/>(<sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>o,<sp/>T<sp/>t<sp/>)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o.<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ostream&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(o)<sp/>&lt;&lt;<sp/>getString&lt;T&gt;(t);<sp/>}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;<sp/>};</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>operator&lt;&lt;<sp/>(<sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>o,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>t<sp/>)</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o.<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ostream&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(o)<sp/>&lt;&lt;<sp/>getString&lt;const<sp/>T*&gt;(t);<sp/>}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;<sp/>};</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>operator&lt;&lt;<sp/>(<sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>o,<sp/>std::ios_base&amp;<sp/>(*pf)(std::ios_base&amp;)<sp/>)</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o.<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ostream&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(o)<sp/>&lt;&lt;<sp/>pf;<sp/>}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;<sp/>};</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_Tsetw<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_;<sp/>};</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>_Tsetw<sp/>tsetw<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>n<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_Tsetf<sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_;<sp/>};</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>_Tsetf<sp/>tsetf<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>n<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>operator&lt;&lt;<sp/>(<sp/><ref refid="clasststream" kindref="compound">tstream</ref>&amp;<sp/>o,<sp/>_Tsetw<sp/>manip<sp/>)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o.<ref refid="clasststream_1a01303d5c2c5cd83d06985622ca50d77b" kindref="member">enabled</ref>())<sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ostream&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(o)<sp/>&lt;&lt;<sp/>std::setw(manip.n_);<sp/>}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;<sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="clasststream" kindref="compound">tstream</ref><sp/><sp/>cdebug;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>cdebug_log(level,indent)<sp/><sp/><sp/>if<sp/>(cdebug.enabled(level))<sp/>cdebug.log(level,indent)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>cdebug_tabw(level,indent)<sp/><sp/>cdebug.tabw(level,indent)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>x-----------------------------------------------------------------x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Classes<sp/>Neededs<sp/>in<sp/>All<sp/>Hurricane<sp/>Modules<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>x-----------------------------------------------------------------x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hurricane/Slot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hurricane/Initializer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hurricane/JsonWriter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hurricane/JsonObject.h&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Commons.h"/>
  </compounddef>
</doxygen>
