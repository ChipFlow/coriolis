<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classHurricane_1_1Locator" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Hurricane::Locator</compoundname>
    <derivedcompoundref refid="classHurricane_1_1Component_1_1Points__Contour_1_1Locator" prot="public" virt="non-virtual">Hurricane::Component::Points_Contour::Locator</derivedcompoundref>
    <derivedcompoundref refid="classHurricane_1_1GenericLocator" prot="public" virt="non-virtual">Hurricane::GenericLocator&lt; Type &gt;</derivedcompoundref>
    <derivedcompoundref refid="classHurricane_1_1Polygon_1_1Points__Manhattan_1_1Locator" prot="public" virt="non-virtual">Hurricane::Polygon::Points_Manhattan::Locator</derivedcompoundref>
    <derivedcompoundref refid="classHurricane_1_1SubSetCollection_1_1Locator" prot="public" virt="non-virtual">Hurricane::SubSetCollection&lt; Type &gt;::Locator</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>class Type</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classHurricane_1_1Locator_1a9ea8740165cec25c217a424ccb11294a" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Hurricane::Locator&lt; Type &gt;::Locator</definition>
        <argsstring>()</argsstring>
        <name>Locator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="39" column="16" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" bodystart="39" bodyend="42"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classHurricane_1_1Locator_1ab4e9f5685d3da643aa16549a5c237d30" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hurricane::Locator&lt; Type &gt;::Locator</definition>
        <argsstring>(const Locator &amp;locator)</argsstring>
        <name>Locator</name>
        <param>
          <type>const <ref refid="classHurricane_1_1Locator" kindref="compound">Locator</ref> &amp;</type>
          <declname>locator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="44" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Locator_1a3d577933c0c10324b9ba0f1e2988942d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classHurricane_1_1Locator" kindref="compound">Locator</ref> &amp;</type>
        <definition>Locator&amp; Hurricane::Locator&lt; Type &gt;::operator=</definition>
        <argsstring>(const Locator &amp;locator)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classHurricane_1_1Locator" kindref="compound">Locator</ref> &amp;</type>
          <declname>locator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="60" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classHurricane_1_1Locator_1a21286beba819c39472c58aa511686355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Hurricane::Locator&lt; Type &gt;::~Locator</definition>
        <argsstring>()</argsstring>
        <name>~Locator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="52" column="21" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Locator_1aa2202b4cf461a7c3b666da10bc96219f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Type</type>
        <definition>Type Hurricane::Locator&lt; Type &gt;::getElement</definition>
        <argsstring>() const =0</argsstring>
        <name>getElement</name>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1aeb56d5e8c83c758b45df976e2f605aa5">getElement</reimplementedby>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1aeb56d5e8c83c758b45df976e2f605aa5">getElement</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><bold>Returns:</bold> the current element (or the value <bold>Type()</bold> when the locator is not or no longer valid). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="68" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Locator_1a83779aa300e3de011bf3b93be8a48d83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classHurricane_1_1Locator" kindref="compound">Locator</ref>&lt; Type &gt; *</type>
        <definition>Locator&lt; Type &gt; * Hurricane::Locator&lt; Type &gt;::getClone</definition>
        <argsstring>() const =0</argsstring>
        <name>getClone</name>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1a59f04c345409d388e58ece8a7105e62e">getClone</reimplementedby>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1a59f04c345409d388e58ece8a7105e62e">getClone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function allocates and returns a new locator that will have the same visiting course than the remaining one of the locator being cloned.</para>
<para><simplesect kind="remark"><para>In principle there is no need to call this function, but if you do so you must not forget to release the clone after its use or, from it, build a generic locator which will do that for you (to be explained later). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="69" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Locator_1a24f16e4010b8978adc9ceef57281f684" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classHurricane_1_1Locator" kindref="compound">Locator</ref>&lt; Type &gt; *</type>
        <definition>virtual Locator&lt;Type&gt;* Hurricane::Locator&lt; Type &gt;::getLocator</definition>
        <argsstring>()</argsstring>
        <name>getLocator</name>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1a60cd19a7462988336c9d7b2378d2db10">getLocator</reimplementedby>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1a60cd19a7462988336c9d7b2378d2db10">getLocator</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="71" column="29" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Locator_1abb6e5255372e22e31bf0a8e4cae93f87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>bool Hurricane::Locator&lt; Type &gt;::isValid</definition>
        <argsstring>() const =0</argsstring>
        <name>isValid</name>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1a8fab34290170e2b443f5522643f53ac9">isValid</reimplementedby>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1a8fab34290170e2b443f5522643f53ac9">isValid</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><bold>Returns:</bold> <bold>true</bold> while the walk has not exhausted the set of elements, else <bold>false</bold>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="80" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Locator_1ad8d72c1625a343a50520792c96fa1ca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>void Hurricane::Locator&lt; Type &gt;::progress</definition>
        <argsstring>()=0</argsstring>
        <name>progress</name>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1a5d35ac6c8bd8cf0f0252ff08ec29a142">progress</reimplementedby>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1a5d35ac6c8bd8cf0f0252ff08ec29a142">progress</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves forward the locator to the following element. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="85" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Locator_1a1b35e491cc50b29c1211ed81f71c0004" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>string</type>
        <definition>virtual string Hurricane::Locator&lt; Type &gt;::_getTypeName</definition>
        <argsstring>() const</argsstring>
        <name>_getTypeName</name>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1a2eeabfe8bdd967a8844736b43300d6bf">_getTypeName</reimplementedby>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1a2eeabfe8bdd967a8844736b43300d6bf">_getTypeName</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="90" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1Locator_1a91ef2131c2318e6c4fa07b2ca58cfa46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>string</type>
        <definition>virtual string Hurricane::Locator&lt; Type &gt;::_getString</definition>
        <argsstring>() const</argsstring>
        <name>_getString</name>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1af96a0923500f0250fcfc3257287a1cea">_getString</reimplementedby>
        <reimplementedby refid="classHurricane_1_1GenericLocator_1af96a0923500f0250fcfc3257287a1cea">_getString</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="96" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" bodystart="96" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classHurricane_1_1Locator" kindref="compound">Locator</ref> description (<bold>API</bold>) </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="classHurricane_1_1Locator_1secLocatorIntro">
<title>Introduction</title>
<para>Locators are objects which allow to walk efficiently through the data structure.</para>
<para>Locators are indeed algorithms. They do not hold a list of elements but the way to go from one element to the next. As such, they are very light in memory, contrary to containers. Locators are the workhorse of <ref refid="classHurricane_1_1Collection" kindref="compound">Collection</ref>, and while they can be used directly, this is not the recommended way.</para>
</sect1>
<sect1 id="classHurricane_1_1Locator_1secLocatorGeneralConcepts">
<title>General concepts</title>
<para><bold>Initialization</bold> In order to get a locator, you must : either ask the collection to provide a locator for visiting the elements of its described set, or build a clone of an existing locator allowing to visit the remaining elements starting from the current position of that locator.</para>
<para><bold>End of walk indicator</bold> The predicate <bold><ref refid="classHurricane_1_1Locator_1abb6e5255372e22e31bf0a8e4cae93f87" kindref="member">isValid()</ref></bold> returns <bold>true</bold> if the locator refers an element of the set, <bold>false</bold> when all the elements have been visited.</para>
<para><bold>getting the current element</bold> The current element is obtained by the accessor <bold><ref refid="classHurricane_1_1Locator_1aa2202b4cf461a7c3b666da10bc96219f" kindref="member">getElement()</ref></bold>. There is no risk to call this function when the visit is finished or the locator is non initialized (the returned value is meaningless).</para>
<para><bold>Walk progression</bold> The function <bold><ref refid="classHurricane_1_1Locator_1ad8d72c1625a343a50520792c96fa1ca1" kindref="member">progress()</ref></bold> moves forward the locator on the next element of the set (does nothing if called after the last element).</para>
</sect1>
<sect1 id="classHurricane_1_1Locator_1secLocatorUsageExamples">
<title>Usage examples</title>
<para>The following sample code shows how to trace the nets of a given cell <programlisting><codeline><highlight class="normal">Cell*<sp/>cell<sp/>=<sp/>...;<sp/>//<sp/>we<sp/>get<sp/>the<sp/>cell</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">if<sp/>(cell)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>cell-&gt;getNets()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>returns<sp/>the<sp/>nets<sp/>collection<sp/>of<sp/>the<sp/>cell</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>and<sp/>getLocator()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/>allocates<sp/>and<sp/>returns<sp/>a<sp/>locator<sp/>for<sp/>traversing<sp/>those<sp/>nets</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Locator&lt;Net*&gt;*<sp/>locator<sp/>=<sp/>cell-&gt;getNets().getLocator();</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>while<sp/>(locator-&gt;isValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Net*<sp/>net<sp/>=<sp/>locator-&gt;getElement();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(net-&gt;getCell()<sp/>==<sp/>cell);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>locator-&gt;progress();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>don&apos;t<sp/>forget<sp/>to<sp/>release<sp/>the<sp/>allocated<sp/>locator</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>delete<sp/>locator;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> And this one how to print all pairs of nets of a given cell <programlisting><codeline><highlight class="normal">Cell*<sp/>cell<sp/>=<sp/>...;<sp/>//<sp/>we<sp/>get<sp/>a<sp/>cell</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">if<sp/>(cell)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Locator&lt;Net*&gt;*<sp/>locator1<sp/>=<sp/>cell-&gt;GetNets().getLocator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>while<sp/>(locator1-&gt;isValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Net*<sp/>net1<sp/>=<sp/>locator1-&gt;getElement();</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Locator&lt;Net*&gt;*<sp/>locator2<sp/>=<sp/>locator1-&gt;getClone();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(locator2-&gt;isValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Net*<sp/>net2<sp/>=<sp/>locator2-&gt;getElement();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>net1<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>net2<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locator2-&gt;progress();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delete<sp/>locator2;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>locator1-&gt;progress();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>delete<sp/>locator1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="remark"><para>Those examples are given in order to explain how locators work. We will see in the following how to do that more simply by using generic locators, or even simpler by using the forEach macros. </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Hurricane::GenericLocator&lt; Type &gt;</label>
        <link refid="classHurricane_1_1GenericLocator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Hurricane::Locator&lt; Type &gt;</label>
        <link refid="classHurricane_1_1Locator"/>
      </node>
    </inheritancegraph>
    <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" line="33" column="11" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/Locator.h" bodystart="33" bodyend="105"/>
    <listofallmembers>
      <member refid="classHurricane_1_1Locator_1a91ef2131c2318e6c4fa07b2ca58cfa46" prot="public" virt="virtual"><scope>Hurricane::Locator</scope><name>_getString</name></member>
      <member refid="classHurricane_1_1Locator_1a1b35e491cc50b29c1211ed81f71c0004" prot="public" virt="virtual"><scope>Hurricane::Locator</scope><name>_getTypeName</name></member>
      <member refid="classHurricane_1_1Locator_1a83779aa300e3de011bf3b93be8a48d83" prot="public" virt="pure-virtual"><scope>Hurricane::Locator</scope><name>getClone</name></member>
      <member refid="classHurricane_1_1Locator_1aa2202b4cf461a7c3b666da10bc96219f" prot="public" virt="pure-virtual"><scope>Hurricane::Locator</scope><name>getElement</name></member>
      <member refid="classHurricane_1_1Locator_1a24f16e4010b8978adc9ceef57281f684" prot="public" virt="virtual"><scope>Hurricane::Locator</scope><name>getLocator</name></member>
      <member refid="classHurricane_1_1Locator_1abb6e5255372e22e31bf0a8e4cae93f87" prot="public" virt="pure-virtual"><scope>Hurricane::Locator</scope><name>isValid</name></member>
      <member refid="classHurricane_1_1Locator_1a9ea8740165cec25c217a424ccb11294a" prot="protected" virt="non-virtual"><scope>Hurricane::Locator</scope><name>Locator</name></member>
      <member refid="classHurricane_1_1Locator_1ab4e9f5685d3da643aa16549a5c237d30" prot="private" virt="non-virtual"><scope>Hurricane::Locator</scope><name>Locator</name></member>
      <member refid="classHurricane_1_1Locator_1a3d577933c0c10324b9ba0f1e2988942d" prot="private" virt="non-virtual"><scope>Hurricane::Locator</scope><name>operator=</name></member>
      <member refid="classHurricane_1_1Locator_1ad8d72c1625a343a50520792c96fa1ca1" prot="public" virt="pure-virtual"><scope>Hurricane::Locator</scope><name>progress</name></member>
      <member refid="classHurricane_1_1Locator_1a21286beba819c39472c58aa511686355" prot="public" virt="virtual"><scope>Hurricane::Locator</scope><name>~Locator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
