<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classHurricane_1_1PhysicalRule" kind="class" language="C++" prot="public">
    <compoundname>Hurricane::PhysicalRule</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Rule</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classHurricane_1_1PhysicalRule_1a69dabd63b7799fdf79485a7374da3b89" prot="public" static="no">
        <type>Rule</type>
        <definition>typedef Rule Hurricane::PhysicalRule::Super</definition>
        <argsstring></argsstring>
        <name>Super</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="67" column="20" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classHurricane_1_1PhysicalRule_1af478dbaa400cbfea59c2d2cc669b63f0" prot="public" static="no">
        <type>std::vector&lt; RuleStep &gt;</type>
        <definition>typedef std::vector&lt;RuleStep&gt; Hurricane::PhysicalRule::Steps</definition>
        <argsstring></argsstring>
        <name>Steps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="68" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classHurricane_1_1PhysicalRule_1a97402e5f27d08ff69305c895ec7b1733" prot="private" static="no" mutable="no">
        <type>Steps</type>
        <definition>Steps Hurricane::PhysicalRule::_stepsValue</definition>
        <argsstring></argsstring>
        <name>_stepsValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="93" column="15" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHurricane_1_1PhysicalRule_1ac1d186417f7f317004d1f8aa9b59f9fa" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Hurricane::PhysicalRule::_doubleValue</definition>
        <argsstring></argsstring>
        <name>_doubleValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="94" column="15" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHurricane_1_1PhysicalRule_1aa4cdab1086c3e7fb9998df5870cbe878" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Hurricane::PhysicalRule::_symmetric</definition>
        <argsstring></argsstring>
        <name>_symmetric</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="95" column="15" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1acce6420a5b62bfac16be8f71431da3fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Hurricane::PhysicalRule::PhysicalRule</definition>
        <argsstring>(const Name &amp;name, const std::string &amp;reference)</argsstring>
        <name>PhysicalRule</name>
        <param>
          <type>const <ref refid="classHurricane_1_1Name" kindref="compound">Name</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="70" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1a2eae6e6705f126b98f59d658f0434c37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Hurricane::PhysicalRule::PhysicalRule</definition>
        <argsstring>(const PhysicalRule &amp;rule)</argsstring>
        <name>PhysicalRule</name>
        <param>
          <type>const <ref refid="classHurricane_1_1PhysicalRule" kindref="compound">PhysicalRule</ref> &amp;</type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="71" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1a7b4b2a5eb8659d9b0c04c942dedfebd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Hurricane::PhysicalRule::~PhysicalRule</definition>
        <argsstring>()</argsstring>
        <name>~PhysicalRule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="72" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1ad419b79177064cab06f7c8dbeccc4dce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hurricane::PhysicalRule::isDouble</definition>
        <argsstring>() const</argsstring>
        <name>isDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if the rule describe non-length values (Volts, Ohms, Henry, Celsius, ...). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="73" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1af1e9eeb3499bfd66cedf5756e2d7e2a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hurricane::PhysicalRule::isDbU</definition>
        <argsstring>() const</argsstring>
        <name>isDbU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if the rule uses physical lengths, with multiple steps or not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="74" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1a56f3eed5835ad1c268638f0f813fc029" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hurricane::PhysicalRule::isSymmetric</definition>
        <argsstring>() const</argsstring>
        <name>isSymmetric</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if the rule is symmetric. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="75" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1a8cc9f7f2dfc580e4f91b7f93ce8a26cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hurricane::PhysicalRule::hasSteps</definition>
        <argsstring>() const</argsstring>
        <name>hasSteps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if the rule has more than one step, that is, is not uniform for all length. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="76" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1afc1e61c5b2baa1126a2e253e02f40f40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hurricane::PhysicalRule::setSymmetric</definition>
        <argsstring>(bool)</argsstring>
        <name>setSymmetric</name>
        <param>
          <type>bool</type>
          <defname>state</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the symmetric state of the rule. This used only for rules bound to two layers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="77" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1a89a0cd27aec78836500a5066c276bbf0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Hurricane::PhysicalRule::getDoubleValue</definition>
        <argsstring>() const</argsstring>
        <name>getDoubleValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <computeroutput>double</computeroutput> value of the rule. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="78" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1aa3548c58b42cd29cbe07d1a0289416a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classHurricane_1_1DbU_1a4fbfa3e8c89347af76c9628ea06c4146" kindref="member">DbU::Unit</ref></type>
        <definition>double Hurricane::PhysicalRule::getValue</definition>
        <argsstring>(Hurricane::DbU::Unit length=0, bool hDir=true) const</argsstring>
        <name>getValue</name>
        <param>
          <type><ref refid="classHurricane_1_1DbU_1a4fbfa3e8c89347af76c9628ea06c4146" kindref="member">Hurricane::DbU::Unit</ref></type>
          <declname>length</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>hDir</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length for which we want the rule&apos;s value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hDir</parametername>
</parameternamelist>
<parameterdescription>
<para>In case of non-isotropic rule, which dimension do we want. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The rule&apos;s value for the given length. If no parameter is supplied, then, the X value of the first step is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="79" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1ada08351fb24f36a63f4e3a3c524000a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hurricane::PhysicalRule::addValue</definition>
        <argsstring>(double)</argsstring>
        <name>addValue</name>
        <param>
          <type>double</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the <computeroutput>double</computeroutput> value of a rule. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="80" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1ac25990fc4aff5e5739ae9632f43d9bf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hurricane::PhysicalRule::addValue</definition>
        <argsstring>(Hurricane::DbU::Unit value, Hurricane::DbU::Unit maxLength)</argsstring>
        <name>addValue</name>
        <param>
          <type><ref refid="classHurricane_1_1DbU_1a4fbfa3e8c89347af76c9628ea06c4146" kindref="member">Hurricane::DbU::Unit</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classHurricane_1_1DbU_1a4fbfa3e8c89347af76c9628ea06c4146" kindref="member">Hurricane::DbU::Unit</ref></type>
          <declname>maxLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <emphasis>value</emphasis> of the step to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The length up to which the rule is valid. passing zero as this argument means always valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Adds a new stepping value to the rule. If the rules never change, give a <computeroutput>maxLength</computeroutput> of zero and only call this function once on the rule. The rule is isotropic in X and Y.</para>
<para>This function can be called multiple time on a rule, each call will add a new step. Steps are defined and ordered according to <computeroutput>maxLength</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="81" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="136" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1a51356a2e3e6cae11c8063b6a092f304d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hurricane::PhysicalRule::addValue</definition>
        <argsstring>(Hurricane::DbU::Unit hValue, Hurricane::DbU::Unit vValue, Hurricane::DbU::Unit maxLength)</argsstring>
        <name>addValue</name>
        <param>
          <type><ref refid="classHurricane_1_1DbU_1a4fbfa3e8c89347af76c9628ea06c4146" kindref="member">Hurricane::DbU::Unit</ref></type>
          <declname>hValue</declname>
        </param>
        <param>
          <type><ref refid="classHurricane_1_1DbU_1a4fbfa3e8c89347af76c9628ea06c4146" kindref="member">Hurricane::DbU::Unit</ref></type>
          <declname>vValue</declname>
        </param>
        <param>
          <type><ref refid="classHurricane_1_1DbU_1a4fbfa3e8c89347af76c9628ea06c4146" kindref="member">Hurricane::DbU::Unit</ref></type>
          <declname>maxLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hvalue</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal <emphasis>value</emphasis> of the step to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vvalue</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical <emphasis>value</emphasis> of the step to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The length up to which the rule is valid. passing zero as this argument means always valid.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Adds a new stepping value to the rule. If the rules never change, give a <computeroutput>maxLength</computeroutput> of zero and only call this function once on the rule. The rule is <bold>not</bold> isotropic, it defines a different value for X and Y.</para>
<para>This function can be called multiple time on a rule, each call will add a new step. Steps are defined and ordered according to <computeroutput>maxLength</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="83" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="144" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1a461f78706c4c2db93a815561c316ffb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Hurricane::PhysicalRule::_getTypeName</definition>
        <argsstring>() const</argsstring>
        <name>_getTypeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="87" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1ae1046b2029205257ddf63c0afa32d812" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string Hurricane::PhysicalRule::_getString</definition>
        <argsstring>() const</argsstring>
        <name>_getString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="88" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1a37b3bc7feaeebc1d755869d3981dd24f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Record *</type>
        <definition>virtual Record* Hurricane::PhysicalRule::_getRecord</definition>
        <argsstring>() const</argsstring>
        <name>_getRecord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="89" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classHurricane_1_1PhysicalRule_1a15ab17ecee319bed2e2dbcc90cfa8bbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hurricane::PhysicalRule::_addValue</definition>
        <argsstring>(const RuleStep &amp;)</argsstring>
        <name>_addValue</name>
        <param>
          <type>const RuleStep &amp;</type>
          <defname>step</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="91" column="28" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="152" bodyend="161"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Define a rule for the technology (<bold>API</bold>). </para>
    </briefdescription>
    <detaileddescription>
<sect1 id="classHurricane_1_1PhysicalRule_1sPhysicalRuleIntro">
<title>Introduction</title>
<para>The constructor of Physical rule is not directly accessible, as thoses objects must be created only through the <ref refid="classHurricane_1_1Technology" kindref="compound">Technology</ref> class <computeroutput>API</computeroutput> (to be stored in the relevant tables).</para>
<para><ref refid="classHurricane_1_1PhysicalRule" kindref="compound">PhysicalRule</ref> is a <emphasis>&quot;one size fit class&quot;</emphasis>. As there will be only a small number of objects created (compare to other kinds) we choose to implement all variant in one class instead of creating a flock of derived classes and all the assorted paraphernalia. As a consequence, not all fields will be used at the same time, they are mutually exclusive. </para>
</sect1>
    </detaileddescription>
    <location file="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" line="65" column="3" bodyfile="/dsk/l1/jpc/coriolis-2.x/src/coriolis/hurricane/src/hurricane/hurricane/PhysicalRule.h" bodystart="65" bodyend="96"/>
    <listofallmembers>
      <member refid="classHurricane_1_1PhysicalRule_1a15ab17ecee319bed2e2dbcc90cfa8bbf" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>_addValue</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1ac1d186417f7f317004d1f8aa9b59f9fa" prot="private" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>_doubleValue</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1a37b3bc7feaeebc1d755869d3981dd24f" prot="public" virt="virtual"><scope>Hurricane::PhysicalRule</scope><name>_getRecord</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1ae1046b2029205257ddf63c0afa32d812" prot="public" virt="virtual"><scope>Hurricane::PhysicalRule</scope><name>_getString</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1a461f78706c4c2db93a815561c316ffb4" prot="public" virt="virtual"><scope>Hurricane::PhysicalRule</scope><name>_getTypeName</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1a97402e5f27d08ff69305c895ec7b1733" prot="private" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>_stepsValue</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1aa4cdab1086c3e7fb9998df5870cbe878" prot="private" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>_symmetric</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1ada08351fb24f36a63f4e3a3c524000a2" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>addValue</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1ac25990fc4aff5e5739ae9632f43d9bf8" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>addValue</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1a51356a2e3e6cae11c8063b6a092f304d" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>addValue</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1a89a0cd27aec78836500a5066c276bbf0" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>getDoubleValue</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1aa3548c58b42cd29cbe07d1a0289416a0" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>getValue</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1a8cc9f7f2dfc580e4f91b7f93ce8a26cc" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>hasSteps</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1af1e9eeb3499bfd66cedf5756e2d7e2a3" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>isDbU</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1ad419b79177064cab06f7c8dbeccc4dce" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>isDouble</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1a56f3eed5835ad1c268638f0f813fc029" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>isSymmetric</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1acce6420a5b62bfac16be8f71431da3fe" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>PhysicalRule</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1a2eae6e6705f126b98f59d658f0434c37" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>PhysicalRule</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1afc1e61c5b2baa1126a2e253e02f40f40" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>setSymmetric</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1af478dbaa400cbfea59c2d2cc669b63f0" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>Steps</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1a69dabd63b7799fdf79485a7374da3b89" prot="public" virt="non-virtual"><scope>Hurricane::PhysicalRule</scope><name>Super</name></member>
      <member refid="classHurricane_1_1PhysicalRule_1a7b4b2a5eb8659d9b0c04c942dedfebd0" prot="public" virt="virtual"><scope>Hurricane::PhysicalRule</scope><name>~PhysicalRule</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
